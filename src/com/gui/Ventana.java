/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gui;

import com.abstracto.Resultado;
import com.analizador.ascendente.lexico.Lexico;
import com.analizador.ascendente.sintactico.Sintactico;
import com.analizador.descendente.Gramatica;
import com.analizador.descendente.ParseException;
import com.analizador.descendente.TokenMgrError;
import com.arbol.NRaiz;
import com.bethecoder.ascii_table.ASCIITable;
import com.entorno.TablaSimbolos;
import com.estaticas.ErrorHandler;
import com.estaticas.Helper;
import com.estaticas.Manejador;
import com.main.Main;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.RTextArea;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.fife.ui.rtextarea.SearchContext;
import org.fife.ui.rtextarea.SearchEngine;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mcalderon
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */

    private NRaiz raizGlobal;
    private TablaSimbolos tsGlobal;
    private Color errorColor = new Color(255, 113, 140);

    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        panelAreaTrabajo = new javax.swing.JPanel();
        tabContainer = new javax.swing.JTabbedPane();
        lblRowCol = new javax.swing.JLabel();
        panelConsola = new javax.swing.JPanel();
        jspConsola = new javax.swing.JScrollPane();
        consolaSalida = new RSyntaxTextArea(10, 10);
        btnAnalizarAscendente = new javax.swing.JButton();
        btnAnalizarDescendente = new javax.swing.JButton();
        panelGraficos = new javax.swing.JPanel();
        graphContainer = new javax.swing.JTabbedPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JMenuItem();
        btnAbrir = new javax.swing.JMenuItem();
        btnGuardar = new javax.swing.JMenuItem();
        btnGuardarComo = new javax.swing.JMenuItem();
        menuReportes = new javax.swing.JMenu();
        btnReporteAST = new javax.swing.JMenuItem();
        btnReporteErrores = new javax.swing.JMenuItem();
        btnReporteTS = new javax.swing.JMenuItem();
        salidasContainer = new javax.swing.JTabbedPane();
        innerPanelConsola = new javax.swing.JPanel();
        innerPanelErrores = new javax.swing.JPanel();
        jspErrores = new javax.swing.JScrollPane();
        consolaErrores = new RSyntaxTextArea(10, 10);
        innerPanelSimbolos = new javax.swing.JPanel();
        jspSimbolos = new javax.swing.JScrollPane();
        consolaSimbolos = new RSyntaxTextArea(10, 10);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelAreaTrabajo.setBorder(javax.swing.BorderFactory.createTitledBorder("√Årea de trabajo"));

        lblRowCol.setText("Linea: NA ~ Columna: NA");

        javax.swing.GroupLayout panelAreaTrabajoLayout = new javax.swing.GroupLayout(panelAreaTrabajo);
        panelAreaTrabajo.setLayout(panelAreaTrabajoLayout);
        panelAreaTrabajoLayout.setHorizontalGroup(
                panelAreaTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelAreaTrabajoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelAreaTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tabContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                                        .addGroup(panelAreaTrabajoLayout.createSequentialGroup()
                                                .addComponent(lblRowCol)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        panelAreaTrabajoLayout.setVerticalGroup(
                panelAreaTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelAreaTrabajoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tabContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRowCol)
                                .addContainerGap())
        );

        panelConsola.setBorder(javax.swing.BorderFactory.createTitledBorder("Salidas"));

        consolaSalida.setBackground(new java.awt.Color(46,46,46));
        consolaSalida.setFont(new Font("Monospaced", Font.PLAIN, 14));
        consolaSalida.setForeground(new Color(47, 255, 172));
        consolaSalida.setCurrentLineHighlightColor(new java.awt.Color(46,46,46));
        jspConsola.setViewportView(consolaSalida);

        javax.swing.GroupLayout innerPanelConsolaLayout = new javax.swing.GroupLayout(innerPanelConsola);
        innerPanelConsola.setLayout(innerPanelConsolaLayout);
        innerPanelConsolaLayout.setHorizontalGroup(
                innerPanelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelConsolaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspConsola, javax.swing.GroupLayout.DEFAULT_SIZE, 1113, Short.MAX_VALUE)
                                .addContainerGap())
        );
        innerPanelConsolaLayout.setVerticalGroup(
                innerPanelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelConsolaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspConsola, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                .addContainerGap())
        );

        salidasContainer.addTab("Consola", innerPanelConsola);

        consolaErrores.setBackground(new java.awt.Color(46,46,46));
        consolaErrores.setFont(new Font("Droid Sans Mono", Font.PLAIN, 14));
        consolaErrores.setForeground(errorColor);
        consolaErrores.setCurrentLineHighlightColor(new java.awt.Color(46,46,46));
        jspErrores.setViewportView(consolaErrores);

        javax.swing.GroupLayout innerPanelErroresLayout = new javax.swing.GroupLayout(innerPanelErrores);
        innerPanelErrores.setLayout(innerPanelErroresLayout);
        innerPanelErroresLayout.setHorizontalGroup(
                innerPanelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelErroresLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspErrores, javax.swing.GroupLayout.DEFAULT_SIZE, 1113, Short.MAX_VALUE)
                                .addContainerGap())
        );
        innerPanelErroresLayout.setVerticalGroup(
                innerPanelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelErroresLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspErrores, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                .addContainerGap())
        );

        salidasContainer.addTab("Errores", innerPanelErrores);

        consolaSimbolos.setBackground(new java.awt.Color(46,46,46));
        consolaSimbolos.setFont(new Font("Droid Sans Mono", Font.PLAIN, 14));
        consolaSimbolos.setForeground(new Color(255, 123, 212));
        consolaSimbolos.setCurrentLineHighlightColor(new java.awt.Color(46,46,46));
        jspSimbolos.setViewportView(consolaSimbolos);

        javax.swing.GroupLayout innerPanelSimbolosLayout = new javax.swing.GroupLayout(innerPanelSimbolos);
        innerPanelSimbolos.setLayout(innerPanelSimbolosLayout);
        innerPanelSimbolosLayout.setHorizontalGroup(
                innerPanelSimbolosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelSimbolosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspSimbolos, javax.swing.GroupLayout.DEFAULT_SIZE, 1113, Short.MAX_VALUE)
                                .addContainerGap())
        );
        innerPanelSimbolosLayout.setVerticalGroup(
                innerPanelSimbolosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(innerPanelSimbolosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspSimbolos, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                .addContainerGap())
        );

        salidasContainer.addTab("Tabla de Simbolos", innerPanelSimbolos);

        javax.swing.GroupLayout panelConsolaLayout = new javax.swing.GroupLayout(panelConsola);
        panelConsola.setLayout(panelConsolaLayout);
        panelConsolaLayout.setHorizontalGroup(
                panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelConsolaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(salidasContainer)
                                .addContainerGap())
        );
        panelConsolaLayout.setVerticalGroup(
                panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelConsolaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(salidasContainer)
                                .addContainerGap())
        );

        btnAnalizarAscendente.setText("Analizar Ascendente");
        btnAnalizarAscendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarAscendenteActionPerformed(evt);
            }
        });

        btnAnalizarDescendente.setText("Analizar Descendente");
        btnAnalizarDescendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarDescendenteActionPerformed(evt);
            }
        });

        panelGraficos.setBorder(javax.swing.BorderFactory.createTitledBorder("Gr√°ficos"));

        javax.swing.GroupLayout panelGraficosLayout = new javax.swing.GroupLayout(panelGraficos);
        panelGraficos.setLayout(panelGraficosLayout);
        panelGraficosLayout.setHorizontalGroup(
                panelGraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelGraficosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(graphContainer)
                                .addContainerGap())
        );
        panelGraficosLayout.setVerticalGroup(
                panelGraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelGraficosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(graphContainer)
                                .addContainerGap())
        );

        menuArchivo.setText("Archivo");

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(btnNuevo);

        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(btnAbrir);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(btnGuardar);

        btnGuardarComo.setText("Guardar como");
        btnGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(btnGuardarComo);

        barraMenu.add(menuArchivo);

        menuReportes.setText("Reportes");

        btnReporteAST.setText("AST");
        btnReporteAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteASTActionPerformed(evt);
            }
        });
        menuReportes.add(btnReporteAST);

        btnReporteErrores.setText("Errores");
        btnReporteErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteErroresActionPerformed(evt);
            }
        });
        menuReportes.add(btnReporteErrores);

        btnReporteTS.setText("Tabla de simbolos");
        btnReporteTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteTSActionPerformed(evt);
            }
        });
        menuReportes.add(btnReporteTS);

        barraMenu.add(menuReportes);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(panelConsola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(panelAreaTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(btnAnalizarAscendente, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnAnalizarDescendente, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(panelGraficos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAnalizarDescendente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAnalizarAscendente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(panelAreaTrabajo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(panelGraficos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelConsola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);

        consolaSalida.setEditable(false);
        consolaErrores.setEditable(false);
        consolaSimbolos.setEditable(false);

        ImageIcon ii = new ImageIcon("/home/mcalderon/IdeaProjects/OLC2_P1_2020/src/com/image/aritlogo.png");
        this.setIconImage(ii.getImage());
        this.setTitle("ARIT SOFTWARE - 201213177");

        pack();
    }// </editor-fold>

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {
        RSyntaxTextArea textArea = getColoredArea();
        Tab pestana = new Tab(textArea, "NuevoTab_" + Helper.getRandomName(), "arit");
        String titulo = pestana.ObtenerNombreCompletoArchivo();
        tabContainer.addTab(titulo, pestana);
        addCloseButton(titulo);
    }

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Selecciona un archivo");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".ARIT Files", "arit");
        jfc.addChoosableFileFilter(filter);
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            String _path_ = jfc.getSelectedFile().getPath();
            String[] strPath = Helper.ObtenerComponentesPath(_path_);
            if (strPath != null) {
                RSyntaxTextArea textArea = getColoredArea();
                String contenido = Helper.ObtenerContenidoArchivo(_path_);
                if(contenido != null) {
                    textArea.setText(contenido);
                    Tab pestana = new Tab(textArea, _path_);
                    tabContainer.addTab(pestana.ObtenerNombreCompletoArchivo(), pestana);
                    addCloseButton(pestana.ObtenerNombreCompletoArchivo());
                    tabContainer.setSelectedComponent(pestana);
                }else{
                    showMessage("Ocurri√≥ un error al obtener el contenido del archivo.  Intente de nuevo.");
                }
            } else {
                showMessage("Ocurri√≥ un error al obtener los componentes del path.  Intente de nuevo.");
            }
        }
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
        if(tabContainer.getTabCount() > 0) {
            Component actualTab = tabContainer.getSelectedComponent();
            Tab auxTab = (Tab)actualTab;
            if (auxTab.ObtenerNombreCompletoArchivo().contains("NuevoTab_")) {
                btnGuardarComoActionPerformed(evt);
            } else {
                RTextScrollPane textObject = (RTextScrollPane)actualTab.getComponentAt(0,0);
                RTextArea contenedor = textObject.getTextArea();
                String texto = contenedor.getText();
                try{
                    try (BufferedWriter fileWriter = new BufferedWriter(new FileWriter(auxTab.getPath() + "/" + auxTab.ObtenerNombreCompletoArchivo()))) {
                        fileWriter.write(texto);
                        showMessage("Archivo guardado existosamente.");
                    }
                }catch(IOException ex){
                    showMessage("Ocurri√≥ un error al guardar el contenido del archivo.  Intente de nuevo.");
                }
            }
        }
    }

    private void btnGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {
        if(tabContainer.getTabCount() > 0) {
            Component actualTab = tabContainer.getSelectedComponent();
            RTextScrollPane textObject = (RTextScrollPane)actualTab.getComponentAt(0,0);
            RTextArea contenedor = textObject.getTextArea();
            String texto = contenedor.getText();
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jfc.setSelectedFile(new File(((Tab)actualTab).ObtenerNombreCompletoArchivo()));
            int returnValue = jfc.showSaveDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                try{
                    try (BufferedWriter fileWriter = new BufferedWriter(new FileWriter(selectedFile.getAbsolutePath()))) {
                        fileWriter.write(texto);
                        showMessage("Archivo guardado existosamente.");
                    }
                }catch(IOException ex){
                    showMessage("Ocurri√≥ un error al guardar el contenido del archivo.  Intente de nuevo.");
                }
            }
        }
    }

    private void btnReporteASTActionPerformed(java.awt.event.ActionEvent evt) {

        if (raizGlobal != null && tsGlobal != null) {

            raizGlobal.GenerarDOT(tsGlobal);

            LinkedList<String> contenido = new LinkedList<>();
            contenido.add("digraph grafo {");
            contenido.addAll(tsGlobal.getNodeDeclarations());
            contenido.addAll(tsGlobal.getNodePointers());
            contenido.add("}");

            try {

                String directory = System.getProperty("user.dir") + "/out";
                String route = directory + "/ast.dot";

                /* Escribo el contenido del archivo */
                Files.write(Paths.get(route), contenido, StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

                /* Genero v√≠a comando el gr√°fico utilizando GraphViz */
                Runtime rt = Runtime.getRuntime();
                Process pr = rt.exec("dot -Tpng "+ route +" -o "+ directory +"/ast.png");
                showMessage("AST generado correctamente.");

                /* Muestro la gr√°fica en un JPanel en el √°rea de gr√°ficos. */
                File img = new File(directory + "/ast.png");
                BufferedImage graph = ImageIO.read(img);

                /* A√±ado la imagen a un JLabel */
                JLabel imagen = new JLabel();
                imagen.setIcon(new ImageIcon(graph));

                /* Creo un panel y le a√±ado el JLabel anterior. */
                JPanel panelito = new JPanel();
                panelito.add(imagen);

                /* Creo un JScrollPane para colocar el panel y que no cambie su tama√±o al agregar la imagen. */
                JScrollPane scrollPane = new JScrollPane(panelito);
                scrollPane.setName("AST");
                scrollPane.setPreferredSize(new Dimension(355, 330));

                /* Agrego el scrollPanel al √°rea de gr√°ficos. */
                addGraph(scrollPane);

            } catch (IOException e) {
                showMessage("Fatal error. No se pudo crear el archivo 'ast.dot'.");
                e.printStackTrace();
            }

        } else {
            showMessage("No se puede generar el AST ya que no existe un √°rbol parseado.");
        }

    }

    private void btnReporteErroresActionPerformed(java.awt.event.ActionEvent evt) {
        consolaErrores.setText("");
        if (ErrorHandler.ListaErrores.size() > 0) {
            String[][] data = ErrorHandler.GetStringArrayErrors().toArray(new String[0][]);
            String[] header = { "Archivo", "Tipo", "Ubicaci√≥n", "Descripcion", "Fila", "Columna" };
            String tabla = ASCIITable.getInstance().getTable(header, data);
            appendErrores(tabla);
        } else {
            appendErrores("No hay errores en la tabla que mostrar.");
        }
    }

    private void btnReporteTSActionPerformed(java.awt.event.ActionEvent evt) {
        consolaSimbolos.setText("");
        if (Manejador.TSEstatica.size() > 0) {
            String[][] data = Manejador.TSEstatica.toArray(new String[0][]);
            String[] header = { "Ambito", "Tipo Simbolo", "Tipo Dato", "Nombre" };
            String tabla = ASCIITable.getInstance().getTable(header, data);
            appendSimbolos("IMPRIMIENDO TABLA DE SIMBOLOS..." + System.lineSeparator());
            appendSimbolos(tabla);
        } else {
            appendSimbolos("No hay simbolos en la tabla que mostrar.");
        }
    }

    private void btnAnalizarAscendenteActionPerformed(java.awt.event.ActionEvent evt) {

        Component actualTab = tabContainer.getSelectedComponent();
        Tab auxTab = (Tab)actualTab;
        RTextScrollPane textObject = (RTextScrollPane)actualTab.getComponentAt(0,0);
        RTextArea contenedor = textObject.getTextArea();
        String texto = contenedor.getText();

        // Limpio la consola de salida
        consolaSalida.setText("");
        consolaErrores.setText("");
        consolaSimbolos.setText("");

        // Quito todas las gr√°ficas
        graphContainer.removeAll();

        // Limpio las variables manejadoras
        Main.cleaner();

        Lexico lexer = new Lexico(new BufferedReader(new InputStreamReader(new ByteArrayInputStream(texto.getBytes(StandardCharsets.UTF_8)))));
        lexer.setArchivo(auxTab.ObtenerNombreCompletoArchivo());

        Sintactico parser = new Sintactico(lexer);
        parser.setNombreArchivo(auxTab.ObtenerNombreCompletoArchivo());

        try {
            parser.parse();
            raizGlobal = parser.getRaiz();
            if (raizGlobal != null) {
                tsGlobal = new TablaSimbolos();
                try {
                    Resultado r = raizGlobal.Ejecutar(tsGlobal);
                    verificarErrores();
                } catch (Exception ex) {
                    appendSalida("FATAL ERROR! - Ocurri√≥ un error al ejecutar las instrucciones!");
                    ex.printStackTrace();
                }
            } else {
                verificarErrores();
            }
        } catch (Exception e) {
            appendSalida("FATAL ERROR! - Ocurri√≥ un error al parsear las instrucciones!");
            e.printStackTrace();
        }

    }

    private void btnAnalizarDescendenteActionPerformed(java.awt.event.ActionEvent evt) {

        Component actualTab = tabContainer.getSelectedComponent();
        Tab auxTab = (Tab)actualTab;
        String archivo = auxTab.ObtenerNombreCompletoArchivo();
        RTextScrollPane textObject = (RTextScrollPane)actualTab.getComponentAt(0,0);
        RTextArea contenedor = textObject.getTextArea();
        String texto = contenedor.getText();

        // Limpio la consola de salida
        consolaSalida.setText("");
        consolaErrores.setText("");
        consolaSimbolos.setText("");

        // Quito todas las gr√°ficas
        graphContainer.removeAll();

        // Limpio las variables manejadoras
        Main.cleaner();

        Gramatica parser = new Gramatica(new BufferedReader(new StringReader(texto)));
        parser.setArchivo(archivo);
        try {
            parser.INICIO(new LinkedList<>());
            raizGlobal = parser.getRoot();
            if (raizGlobal != null) {
                tsGlobal = new TablaSimbolos();
                try {
                    raizGlobal.Ejecutar(tsGlobal);
                    verificarErrores();
                } catch (Exception ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                verificarErrores();
            }
        } catch (TokenMgrError | ParseException tme) {
            verificarErrores();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    public RSyntaxTextArea getColoredArea() {
        RSyntaxTextArea area = new RSyntaxTextArea(10, 10);
        Theme theme;
        AbstractTokenMakerFactory atm = (AbstractTokenMakerFactory) TokenMakerFactory.getDefaultInstance();
        atm.putMapping("text/example", "com.paint.PainterIDE");
        try {
            theme = Theme.load(getClass().getResourceAsStream("/com/paint/XMLColor.xml"));
            theme.apply(area);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        area.setSyntaxEditingStyle("text/example");
        area.setCodeFoldingEnabled(true);
        area.setTabSize(4);
        area.setTabsEmulated(true);
        area.setAntiAliasingEnabled(true);
        setFont(area, new Font("Source Code Pro", Font.PLAIN, 14));

        area.addCaretListener(new CaretListener() {
            // Each time the caret is moved, it will trigger the listener and its method caretUpdate.
            // It will then pass the event to the update method including the source of the event (which is our textarea control)
            public void caretUpdate(CaretEvent e) {

                RSyntaxTextArea editArea = (RSyntaxTextArea)e.getSource();

                // Lets start with some default values for the line and column.
                int linenum = 1;
                int columnnum = 1;

                // We create a try catch to catch any exceptions. We will simply ignore such an error for our demonstration.
                try {
                    // First we find the position of the caret. This is the number of where the caret is in relation to the start of the JTextArea
                    // in the upper left corner. We use this position to find offset values (eg what line we are on for the given position as well as
                    // what position that line starts on.
                    int caretpos = editArea.getCaretPosition();
                    linenum = editArea.getLineOfOffset(caretpos);

                    // We subtract the offset of where our line starts from the overall caret position.
                    // So lets say that we are on line 5 and that line starts at caret position 100, if our caret position is currently 106
                    // we know that we must be on column 6 of line 5.
                    columnnum = caretpos - editArea.getLineStartOffset(linenum);

                    // We have to add one here because line numbers start at 0 for getLineOfOffset and we want it to start at 1 for display.
                    linenum += 1;
                }
                catch(Exception ex) { }

                // Once we know the position of the line and the column, pass it to a helper function for updating the status bar.
                updateLineAndColumn(linenum, columnnum);
            }

        });

        return area;
    }

    private void updateLineAndColumn(int line, int column) {
        lblRowCol.setText("Linea: " + line + " ~ Columna: " + column);
    }

    public static void setFont(RSyntaxTextArea textArea, Font font) {
        if (font != null) {
            SyntaxScheme ss = textArea.getSyntaxScheme();
            ss = (SyntaxScheme) ss.clone();
            for (int i = 0; i < ss.getStyleCount(); i++) {
                if (ss.getStyle(i) != null) {
                    ss.getStyle(i).font = font;
                }
            }
            textArea.setSyntaxScheme(ss);
            textArea.setFont(font);
        }
    }

    public void appendSalida(String cadena) {
        consolaSalida.append("> " + cadena + System.lineSeparator());
    }

    private void appendErrores(String cadena) {
        consolaErrores.append(cadena);
    }

    private void appendSimbolos(String cadena) {
        consolaSimbolos.append(cadena);
    }

    private void verificarErrores() {
        if (ErrorHandler.ListaErrores.size() > 0) {
            showMessage("Ocurrieron errores al ejecutar el archivo.  Revisar pesta√±a de errores.");
        }
    }

    private void addCloseButton(String titulo) {
        int index = tabContainer.indexOfTab(titulo);
        JPanel pnlTab = new JPanel(new GridBagLayout());
        pnlTab.setOpaque(false);
        JLabel lblTitle = new JLabel(titulo);
        lblTitle.setBorder(new EmptyBorder(2, 0, 0, 0));
        JButton btnClose = new JButton("X");
        btnClose.setBackground(new Color(200, 221, 242));
        btnClose.setForeground(Color.RED);
        btnClose.setFocusPainted(false);
        btnClose.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnClose.setBorder(new EmptyBorder(1, 10, 0, 0));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        pnlTab.add(lblTitle, gbc);
        gbc.gridx++;
        gbc.weightx = 0;
        pnlTab.add(btnClose, gbc);
        tabContainer.setTabComponentAt(index, pnlTab);
        btnClose.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt) {
                int index = tabContainer.indexOfTab(titulo);
                if (index >= 0) {
                    tabContainer.removeTabAt(index);
                }
            }
        });
    }

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(null, message);
    }

    public JTabbedPane getGraphContainer() {
        return graphContainer;
    }

    public void addGraph(Component imagen) {
        graphContainer.add(imagen);
    }

    // Variables declaration - do not modify
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem btnAbrir;
    private javax.swing.JButton btnAnalizarAscendente;
    private javax.swing.JButton btnAnalizarDescendente;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JMenuItem btnGuardarComo;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JMenuItem btnReporteAST;
    private javax.swing.JMenuItem btnReporteErrores;
    private javax.swing.JMenuItem btnReporteTS;
    private RSyntaxTextArea consolaSalida;
    private javax.swing.JTabbedPane graphContainer;
    private javax.swing.JScrollPane jspConsola;
    private javax.swing.JLabel lblRowCol;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuReportes;
    private javax.swing.JPanel panelAreaTrabajo;
    private javax.swing.JPanel panelConsola;
    private javax.swing.JPanel panelGraficos;
    private javax.swing.JTabbedPane tabContainer;
    private RSyntaxTextArea consolaErrores;
    private RSyntaxTextArea consolaSimbolos;
    private javax.swing.JPanel innerPanelConsola;
    private javax.swing.JPanel innerPanelErrores;
    private javax.swing.JPanel innerPanelSimbolos;
    private javax.swing.JScrollPane jspErrores;
    private javax.swing.JScrollPane jspSimbolos;
    private javax.swing.JTabbedPane salidasContainer;
    // End of variables declaration
}