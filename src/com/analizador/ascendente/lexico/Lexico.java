/* The following code was generated by JFlex 1.7.0 */

/************************* 1RA AREA: CÃ“DIGO DE USUARIO *************************/

/* PAQUETES E IMPORTACIONES */
package com.analizador.ascendente.lexico;

import com.estaticas.ErrorHandler;
import com.analizador.ascendente.sintactico.CUPSim;
import java_cup.runtime.*;

/********************** 2DA AREA: OPCIONES Y DECLARACIONES *********************/


public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_CAPTURE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\6\1\70\1\67\1\5\22\0\1\67\1\60\1\65"+
    "\1\7\1\0\1\44\1\64\1\0\1\45\1\46\1\10\1\41\1\51"+
    "\1\42\1\4\1\11\12\3\1\53\1\52\1\57\1\55\1\56\1\54"+
    "\1\0\32\1\1\47\1\66\1\50\1\43\1\2\1\0\1\25\1\27"+
    "\1\12\1\26\1\20\1\17\1\35\1\24\1\16\1\1\1\31\1\15"+
    "\1\36\1\13\1\32\1\33\1\1\1\30\1\21\1\23\1\14\1\40"+
    "\1\22\1\37\1\34\1\1\1\61\1\63\1\62\7\0\1\70\u1fa2\0"+
    "\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\17\2\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\0\7\2\1\40\1\41"+
    "\15\2\1\42\12\2\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\2\37\2\0"+
    "\11\2\1\56\21\2\1\57\5\2\2\0\1\37\1\0"+
    "\1\60\1\2\1\61\1\62\1\63\1\64\3\2\1\65"+
    "\4\2\1\66\3\2\1\67\7\2\1\70\1\2\1\71"+
    "\2\2\1\72\3\2\1\73\2\2\1\74\1\75\3\2"+
    "\1\76\2\2\1\77\2\2\1\100\1\101\3\2\1\102"+
    "\1\2\1\103\3\2\1\104\2\2\1\105\1\106\1\107"+
    "\1\110\5\2\1\111\1\112\1\113\1\114\12\2\1\115"+
    "\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\162\0\u011d\0\162"+
    "\0\162\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\162\0\162\0\162\0\u04e6\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\162\0\162\0\162\0\162\0\162\0\u0603\0\162"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\253\0\253\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\253\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\162\0\162\0\u0675"+
    "\0\u0dce\0\162\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\253\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\253"+
    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u1599"+
    "\0\u15d2\0\253\0\u160b\0\253\0\253\0\253\0\253\0\u1644"+
    "\0\u167d\0\u16b6\0\253\0\u16ef\0\u1728\0\u1761\0\u179a\0\253"+
    "\0\u17d3\0\u180c\0\u1845\0\253\0\u187e\0\u18b7\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u19d4\0\253\0\u1a0d\0\253\0\u1a46\0\u1a7f"+
    "\0\253\0\u1ab8\0\u1af1\0\u1b2a\0\253\0\u1b63\0\u1b9c\0\253"+
    "\0\253\0\u1bd5\0\u1c0e\0\u1c47\0\253\0\u1c80\0\u1cb9\0\253"+
    "\0\u1cf2\0\u1d2b\0\253\0\253\0\u1d64\0\u1d9d\0\u1dd6\0\253"+
    "\0\u1e0f\0\253\0\u1e48\0\u1e81\0\u1eba\0\253\0\u1ef3\0\u1f2c"+
    "\0\253\0\253\0\253\0\253\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\253\0\253\0\253\0\253\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\253"+
    "\0\253\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\3\2\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\4\1\30\2\4\1\31\2\4\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\3\1\6\1\0\5\57\2\6\56\57"+
    "\1\60\1\61\2\57\72\0\3\4\6\0\27\4\33\0"+
    "\1\5\1\62\73\0\1\63\1\64\61\0\3\4\6\0"+
    "\13\4\1\65\4\4\1\66\6\4\31\0\3\4\6\0"+
    "\1\67\1\4\1\70\13\4\1\71\10\4\31\0\3\4"+
    "\6\0\4\4\1\72\1\4\1\73\20\4\31\0\3\4"+
    "\6\0\1\4\1\74\3\4\1\75\21\4\31\0\3\4"+
    "\6\0\2\4\1\76\10\4\1\77\4\4\1\100\6\4"+
    "\31\0\3\4\6\0\3\4\1\101\23\4\31\0\3\4"+
    "\6\0\10\4\1\102\1\103\15\4\31\0\3\4\6\0"+
    "\12\4\1\104\14\4\31\0\3\4\6\0\16\4\1\105"+
    "\1\4\1\106\1\4\1\107\4\4\31\0\3\4\6\0"+
    "\4\4\1\110\22\4\31\0\3\4\6\0\16\4\1\111"+
    "\10\4\31\0\3\4\6\0\6\4\1\112\11\4\1\113"+
    "\6\4\31\0\3\4\6\0\13\4\1\114\2\4\1\115"+
    "\10\4\31\0\3\4\6\0\6\4\1\116\11\4\1\117"+
    "\6\4\31\0\3\4\6\0\3\4\1\120\1\121\11\4"+
    "\1\122\10\4\31\0\3\4\6\0\6\4\1\123\4\4"+
    "\1\124\4\4\1\125\6\4\74\0\1\126\101\0\1\127"+
    "\1\130\67\0\1\131\70\0\1\132\70\0\1\133\13\0"+
    "\5\57\2\0\56\57\2\0\2\57\13\0\1\134\7\0"+
    "\1\135\4\0\1\136\34\0\1\137\6\0\1\140\65\0"+
    "\5\63\1\141\1\142\62\63\10\143\1\144\60\143\1\0"+
    "\3\4\6\0\7\4\1\145\17\4\31\0\3\4\6\0"+
    "\1\4\1\146\25\4\31\0\3\4\6\0\20\4\1\147"+
    "\6\4\31\0\3\4\6\0\3\4\1\150\23\4\31\0"+
    "\3\4\6\0\20\4\1\151\6\4\31\0\3\4\6\0"+
    "\7\4\1\152\17\4\31\0\3\4\6\0\1\4\1\153"+
    "\25\4\31\0\3\4\6\0\1\4\1\154\25\4\31\0"+
    "\3\4\6\0\3\4\1\155\23\4\31\0\3\4\6\0"+
    "\16\4\1\156\10\4\31\0\3\4\6\0\7\4\1\157"+
    "\17\4\31\0\3\4\6\0\4\4\1\160\22\4\31\0"+
    "\3\4\6\0\16\4\1\161\10\4\31\0\3\4\6\0"+
    "\4\4\1\162\22\4\31\0\3\4\6\0\2\4\1\163"+
    "\24\4\31\0\3\4\6\0\2\4\1\164\1\165\23\4"+
    "\31\0\3\4\6\0\21\4\1\166\5\4\31\0\3\4"+
    "\6\0\7\4\1\167\17\4\31\0\3\4\6\0\16\4"+
    "\1\170\10\4\31\0\3\4\6\0\5\4\1\171\21\4"+
    "\31\0\3\4\6\0\16\4\1\172\10\4\31\0\3\4"+
    "\6\0\6\4\1\173\20\4\31\0\3\4\6\0\11\4"+
    "\1\174\12\4\1\175\2\4\31\0\3\4\6\0\2\4"+
    "\1\176\24\4\31\0\3\4\6\0\20\4\1\177\6\4"+
    "\31\0\3\4\6\0\6\4\1\200\20\4\31\0\3\4"+
    "\6\0\4\4\1\201\22\4\31\0\3\4\6\0\13\4"+
    "\1\202\1\203\12\4\31\0\3\4\6\0\11\4\1\204"+
    "\15\4\31\0\3\4\6\0\14\4\1\205\12\4\36\0"+
    "\1\142\62\0\10\143\1\206\60\143\7\207\1\210\1\211"+
    "\60\207\1\0\3\4\6\0\6\4\1\212\20\4\31\0"+
    "\3\4\6\0\11\4\1\213\15\4\31\0\3\4\6\0"+
    "\3\4\1\214\23\4\31\0\3\4\6\0\3\4\1\215"+
    "\23\4\31\0\3\4\6\0\10\4\1\216\16\4\31\0"+
    "\3\4\6\0\11\4\1\217\15\4\31\0\3\4\6\0"+
    "\23\4\1\220\3\4\31\0\3\4\6\0\1\221\26\4"+
    "\31\0\3\4\6\0\7\4\1\222\17\4\31\0\3\4"+
    "\6\0\6\4\1\223\20\4\31\0\3\4\6\0\11\4"+
    "\1\224\15\4\31\0\3\4\6\0\4\4\1\225\22\4"+
    "\31\0\3\4\6\0\3\4\1\226\23\4\31\0\3\4"+
    "\6\0\1\4\1\227\4\4\1\230\20\4\31\0\3\4"+
    "\6\0\21\4\1\231\5\4\31\0\3\4\6\0\20\4"+
    "\1\232\6\4\31\0\3\4\6\0\6\4\1\233\20\4"+
    "\31\0\3\4\6\0\11\4\1\234\15\4\31\0\3\4"+
    "\6\0\13\4\1\235\13\4\31\0\3\4\6\0\13\4"+
    "\1\236\13\4\31\0\3\4\6\0\21\4\1\237\5\4"+
    "\31\0\3\4\6\0\13\4\1\240\13\4\31\0\3\4"+
    "\6\0\2\4\1\241\24\4\31\0\3\4\6\0\20\4"+
    "\1\242\6\4\31\0\3\4\6\0\1\4\1\243\25\4"+
    "\31\0\3\4\6\0\11\4\1\244\15\4\31\0\3\4"+
    "\6\0\1\4\1\245\25\4\31\0\3\4\6\0\1\4"+
    "\1\246\25\4\31\0\3\4\6\0\4\4\1\247\22\4"+
    "\31\0\3\4\6\0\16\4\1\250\10\4\31\0\3\4"+
    "\6\0\6\4\1\251\20\4\30\0\7\143\1\142\1\206"+
    "\60\143\10\207\1\211\67\207\1\210\1\211\1\0\57\207"+
    "\1\0\3\4\6\0\4\4\1\252\22\4\31\0\3\4"+
    "\6\0\11\4\1\253\15\4\31\0\3\4\6\0\11\4"+
    "\1\254\15\4\31\0\3\4\6\0\6\4\1\255\20\4"+
    "\31\0\3\4\6\0\1\256\26\4\31\0\3\4\6\0"+
    "\1\4\1\257\25\4\31\0\3\4\6\0\6\4\1\260"+
    "\20\4\31\0\3\4\6\0\17\4\1\261\7\4\31\0"+
    "\3\4\6\0\21\4\1\262\5\4\31\0\3\4\6\0"+
    "\10\4\1\263\16\4\31\0\3\4\6\0\20\4\1\264"+
    "\6\4\31\0\3\4\6\0\22\4\1\265\4\4\31\0"+
    "\3\4\6\0\2\4\1\266\24\4\31\0\3\4\6\0"+
    "\3\4\1\267\23\4\31\0\3\4\6\0\17\4\1\270"+
    "\7\4\31\0\3\4\6\0\16\4\1\271\10\4\31\0"+
    "\3\4\6\0\26\4\1\272\31\0\3\4\6\0\14\4"+
    "\1\273\12\4\31\0\3\4\6\0\11\4\1\274\15\4"+
    "\31\0\3\4\6\0\13\4\1\275\13\4\31\0\3\4"+
    "\6\0\4\4\1\276\22\4\31\0\3\4\6\0\1\4"+
    "\1\277\25\4\31\0\3\4\6\0\12\4\1\300\14\4"+
    "\31\0\3\4\6\0\4\4\1\301\22\4\31\0\3\4"+
    "\6\0\12\4\1\302\14\4\31\0\3\4\6\0\23\4"+
    "\1\303\3\4\31\0\3\4\6\0\6\4\1\304\20\4"+
    "\31\0\3\4\6\0\6\4\1\305\20\4\31\0\3\4"+
    "\6\0\5\4\1\306\21\4\31\0\3\4\6\0\3\4"+
    "\1\307\23\4\31\0\3\4\6\0\20\4\1\310\6\4"+
    "\31\0\3\4\6\0\1\4\1\311\25\4\31\0\3\4"+
    "\6\0\6\4\1\312\20\4\31\0\3\4\6\0\1\4"+
    "\1\313\25\4\31\0\3\4\6\0\25\4\1\314\1\4"+
    "\31\0\3\4\6\0\2\4\1\315\24\4\31\0\3\4"+
    "\6\0\20\4\1\316\6\4\31\0\3\4\6\0\3\4"+
    "\1\317\23\4\31\0\3\4\6\0\16\4\1\320\10\4"+
    "\31\0\3\4\6\0\16\4\1\321\10\4\31\0\3\4"+
    "\6\0\11\4\1\322\15\4\31\0\3\4\6\0\11\4"+
    "\1\323\15\4\31\0\3\4\6\0\6\4\1\324\20\4"+
    "\31\0\3\4\6\0\1\4\1\325\25\4\31\0\3\4"+
    "\6\0\6\4\1\326\20\4\31\0\3\4\6\0\1\327"+
    "\26\4\31\0\3\4\6\0\1\330\26\4\31\0\3\4"+
    "\6\0\1\4\1\331\25\4\31\0\3\4\6\0\13\4"+
    "\1\332\13\4\31\0\3\4\6\0\13\4\1\333\13\4"+
    "\31\0\3\4\6\0\23\4\1\334\3\4\31\0\3\4"+
    "\6\0\7\4\1\335\17\4\31\0\3\4\6\0\7\4"+
    "\1\336\17\4\31\0\3\4\6\0\11\4\1\337\15\4"+
    "\31\0\3\4\6\0\6\4\1\340\20\4\31\0\3\4"+
    "\6\0\6\4\1\341\20\4\31\0\3\4\6\0\12\4"+
    "\1\342\14\4\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\1\1\2\11\20\1\3\11"+
    "\1\1\10\11\4\1\5\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\41\1\12\11\2\1\1\11\2\0\41\1"+
    "\2\0\1\1\1\0\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String NombreArchivo = "";
    StringBuilder cadena = new StringBuilder();

    public String getNombreArchivo() {
        return NombreArchivo;
    }

    public void setNombreArchivo(String NombreArchivo) {
        this.NombreArchivo = NombreArchivo;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yychar = 1;
    yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(CUPSim.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorHandler.AddError(getNombreArchivo(), "LÃ©xico", "[LEXER]", "El caracter '" + yytext() + "' no pertenece al alfabeto del lenguaje.", yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 2: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: identificador");    return new Symbol(CUPSim.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 3: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: numero_entero");    return new Symbol(CUPSim.numero_entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 4: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 83: break;
          case 5: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: por");              return new Symbol(CUPSim.por, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 6: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: div");              return new Symbol(CUPSim.div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 7: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: c");                return new Symbol(CUPSim.r_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 8: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mas");              return new Symbol(CUPSim.mas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 9: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: menos");            return new Symbol(CUPSim.menos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 10: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: pot");              return new Symbol(CUPSim.pot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 11: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: par_a");            return new Symbol(CUPSim.par_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 12: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: par_c");            return new Symbol(CUPSim.par_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 13: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: cor_a");            return new Symbol(CUPSim.cor_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 14: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: cor_c");            return new Symbol(CUPSim.cor_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 15: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: coma");             return new Symbol(CUPSim.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 16: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: puco");             return new Symbol(CUPSim.puco, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 17: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: dospu");            return new Symbol(CUPSim.dospu, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 18: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: interrogacion");    return new Symbol(CUPSim.interrogacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 19: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: igual");            return new Symbol(CUPSim.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 20: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mayor");            return new Symbol(CUPSim.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 21: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: menor");            return new Symbol(CUPSim.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 22: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: not");              return new Symbol(CUPSim.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 23: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: llave_a");          return new Symbol(CUPSim.llave_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 24: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: llave_c");          return new Symbol(CUPSim.llave_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 25: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: or");               return new Symbol(CUPSim.or, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 26: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: and");              return new Symbol(CUPSim.and, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 27: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: comilla");          cadena.setLength(0); yybegin(STRING_CAPTURE);
            } 
            // fall through
          case 106: break;
          case 28: 
            { cadena.append(yytext());
            } 
            // fall through
          case 107: break;
          case 29: 
            { System.out.println("Encontro el simbolo: " + cadena.toString() + " >>>> Token: cadena"); yybegin(YYINITIAL); return new Symbol(CUPSim.cadena, yycolumn, yyline, cadena.toString());
            } 
            // fall through
          case 108: break;
          case 30: 
            { cadena.append('\\');
            } 
            // fall through
          case 109: break;
          case 31: 
            { /* Comentarios, se ignoran */
            } 
            // fall through
          case 110: break;
          case 32: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: in");               return new Symbol(CUPSim.r_in, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 33: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: if");               return new Symbol(CUPSim.r_if, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 34: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: do");               return new Symbol(CUPSim.r_do, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 35: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mod");              return new Symbol(CUPSim.mod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 36: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: igualdad");         return new Symbol(CUPSim.igualdad, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 37: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: flecha");           return new Symbol(CUPSim.flecha, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 38: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mayor_igual");      return new Symbol(CUPSim.mayor_igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 39: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: menor_igual");      return new Symbol(CUPSim.menor_igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 40: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: diferente_que");    return new Symbol(CUPSim.diferente_que, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 41: 
            { cadena.append('\n');
            } 
            // fall through
          case 120: break;
          case 42: 
            { cadena.append('\t');
            } 
            // fall through
          case 121: break;
          case 43: 
            { cadena.append('\r');
            } 
            // fall through
          case 122: break;
          case 44: 
            { cadena.append('\"');
            } 
            // fall through
          case 123: break;
          case 45: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: numero_decimal");   return new Symbol(CUPSim.numero_decimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 46: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: for");              return new Symbol(CUPSim.r_for, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 47: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: pie");              return new Symbol(CUPSim.r_pie, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 48: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: case");             return new Symbol(CUPSim.r_case, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 49: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: ncol");             return new Symbol(CUPSim.r_ncol, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 50: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: r_nulo");           return new Symbol(CUPSim.r_nulo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 51: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: nrow");             return new Symbol(CUPSim.r_nrow, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 52: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: list");             return new Symbol(CUPSim.r_list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 53: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: else");             return new Symbol(CUPSim.r_else, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 54: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: true");             return new Symbol(CUPSim.r_true, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 55: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: hist");             return new Symbol(CUPSim.r_hist, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 56: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: plot");             return new Symbol(CUPSim.r_plot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 57: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mean");             return new Symbol(CUPSim.r_mean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 58: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: mode");             return new Symbol(CUPSim.r_mode, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 59: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: false");            return new Symbol(CUPSim.r_false, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 60: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: while");            return new Symbol(CUPSim.r_while, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 61: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: trunk");            return new Symbol(CUPSim.r_trunk, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 62: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: array");            return new Symbol(CUPSim.r_array, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 63: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: break");            return new Symbol(CUPSim.r_break, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 64: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: round");            return new Symbol(CUPSim.r_round, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 65: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: print");            return new Symbol(CUPSim.r_print, yycolumn, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 66: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: length");           return new Symbol(CUPSim.r_length, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 67: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: switch");           return new Symbol(CUPSim.r_switch, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 68: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: typeof");           return new Symbol(CUPSim.r_typeof, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 69: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: return");           return new Symbol(CUPSim.r_return, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 70: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: remove");           return new Symbol(CUPSim.r_remove, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 71: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: median");           return new Symbol(CUPSim.r_median, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 72: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: matrix");           return new Symbol(CUPSim.r_matrix, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 73: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: default");          return new Symbol(CUPSim.r_default, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 74: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: barplot");          return new Symbol(CUPSim.r_barplot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 75: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: continue");         return new Symbol(CUPSim.r_continue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 76: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: function");         return new Symbol(CUPSim.r_function, yycolumn, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 77: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: touppercase");      return new Symbol(CUPSim.r_touppercase, yycolumn, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 78: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: tolowercase");      return new Symbol(CUPSim.r_tolowercase, yycolumn, yyline, yytext());
            } 
            // fall through
          case 157: break;
          case 79: 
            { System.out.println("Encontro el simbolo: " + yytext() + " >>>> Token: stringlength");     return new Symbol(CUPSim.r_stringlength, yycolumn, yyline, yytext());
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
