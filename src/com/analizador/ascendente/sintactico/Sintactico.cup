/************************ 1RA AREA: CÓDIGO DE USUARIO ************************/

/* IMPORTACIONES, PAQUETES */
package com.analizador.ascendente.sintactico;

import com.arbol.*;
import com.abstracto.Nodo;
import com.abstracto.Dimension;
import com.constantes.ETipoDato;
import com.constantes.ETipoNodo;
import com.estaticas.ErrorHandler;
import com.constantes.ETipoDimension;

import java.util.Arrays;
import java_cup.runtime.*;
import java.util.LinkedList;

/* CODIGO PARA EL PARSER, VARIABLES Y METODOS */
parser code
{:
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        System.err.println("PARSER RECOVERED! No se esperaba el caracter '" + lexema + "'.");
        ErrorHandler.AddError("Sintáctico", archivo, "[PARSER_RECOVERED]", "No se esperaba el caracter '" + lexema + "'.", fila, columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        System.err.println("PARSER PANIC! No se esperaba el caracter '" + lexema + "'.");
        ErrorHandler.AddError("Sintáctico", archivo, "[PARSER_PANIC]", "No se esperaba el caracter '" + lexema + "'.", fila, columna);
    }

    private NRaiz raiz;
    private String archivo;

    public NRaiz getRaiz() {
        return raiz;
    }

    public void setNombreArchivo(String nombre_archivo) {
        this.archivo = nombre_archivo;
    }

:}

/* CODIGO PARA LAS ACCIONES GRAMATICALES */
action code {::}

/************************** 2DA AREA: DECLARACIONES **************************/

/* RESERVADOS */
terminal r_c, r_nulo, r_if, r_else, r_switch, r_case, r_default, r_break, r_continue, r_return;
terminal r_while, r_for, r_do, r_in, r_function, r_print, r_typeof, r_length, r_array, r_matrix, r_list;
terminal r_ncol, r_nrow, r_stringlength, r_tolowercase, r_touppercase, r_trunk, r_round, r_mean, r_median;
terminal r_mode, r_pie, r_barplot, r_plot, r_hist, r_remove, r_true, r_false;

/* OPERADORES */
terminal mas, menos, por, div, pot, mod, par_a, par_c, cor_a, cor_c;
terminal coma, puco, dospu, interrogacion, menor, mayor, menor_igual;
terminal mayor_igual, diferente_que, igualdad, igual, llave_a, llave_c;
terminal or, and, not, flecha;

/* PRIMITIVOS */
terminal String identificador, numero_entero, numero_decimal, cadena, uminus;

/* NO TERMINALES */
non terminal INICIO;
non terminal NIf SIF;
non terminal CASE;
non terminal LinkedList<NIf> SELSE;
non terminal LinkedList<Nodo> BLOQUE;
non terminal Dimension ACCESO;
non terminal NIf ELSE_IF;
non terminal NParam PARAMETRO;
non terminal Nodo EXPRESION;
non terminal LinkedList<NIf> LISTA_ELIF;
non terminal Nodo INSTRUCCION;
non terminal LISTA_CASES;
non terminal LinkedList<Dimension> LISTA_ACCESO;
non terminal Nodo SENTENCIA_IF;
non terminal SENTENCIA_FOR;
non terminal SENTENCIA_PIE;
non terminal Nodo DECASI_FUNCION;
non terminal SENTENCIA_PLOT;
non terminal SENTENCIA_HIST;
non terminal Nodo DECASI_VARIABLE;
non terminal SENTENCIA_WHILE;
non terminal Nodo SENTENCIA_BREAK;
non terminal Nodo SENTENCIA_PRINT;
non terminal SENTENCIA_SWITCH;
non terminal Nodo SENTENCIA_RETURN;
non terminal SENTENCIA_DOWHILE;
non terminal Nodo SENTENCIA_LLAMADA;
non terminal LinkedList<Nodo> LISTA_EXPRESIONES;
non terminal SENTENCIA_BARPLOT;
non terminal LinkedList<NParam> PARAMETROS_FUNCION;
non terminal Nodo SENTENCIA_CONTINUE;
non terminal LinkedList<Nodo> PARAMETROS_LLAMADA;
non terminal LinkedList<Nodo> LISTA_INSTRUCCIONES;
non terminal LinkedList<NParam> LISTA_PARAM_FUNCION;

/* PRECEDENCIA DE OPERADORES */
precedence right interrogacion;
precedence left or;
precedence left and;
precedence left diferente_que, igualdad;
precedence nonassoc menor, mayor, menor_igual, mayor_igual;
precedence left mas, menos;
precedence left por, div, mod, pot;
precedence right uminus, not;

start with INICIO;

/************************ 3RA AREA: REGLAS SEMANTICAS ************************/

INICIO
    ::= LISTA_INSTRUCCIONES:a                                                                                       {: raiz = new NRaiz(aright, aleft, archivo, a); :}
;

LISTA_INSTRUCCIONES
    ::= LISTA_INSTRUCCIONES:a INSTRUCCION:b                                                                         {: RESULT = a;  RESULT.add(b); :}
    |   INSTRUCCION:a                                                                                               {: RESULT = new LinkedList<>();  RESULT.add(a); :}
;

INSTRUCCION
    ::= DECASI_FUNCION:a                                                                                            {: RESULT = a; :}
    |   DECASI_VARIABLE:a                                                                                           {: RESULT = a; :}
    |   DECASI_VARIABLE:a puco                                                                                      {: RESULT = a; :}
    |   SENTENCIA_IF:a                                                                                              {: RESULT = a; :}
    |   SENTENCIA_SWITCH:a                                                                                          {: /*RESULT = a;*/ :}
    |   SENTENCIA_WHILE:a                                                                                           {: /*RESULT = a;*/ :}
    |   SENTENCIA_DOWHILE:a                                                                                         {: /*RESULT = a;*/ :}
    |   SENTENCIA_DOWHILE:a puco                                                                                    {: /*RESULT = a;*/ :}
    |   SENTENCIA_FOR:a                                                                                             {: /*RESULT = a;*/ :}
    |   SENTENCIA_BREAK:a                                                                                           {: RESULT = a; :}
    |   SENTENCIA_CONTINUE:a                                                                                        {: RESULT = a; :}
    |   SENTENCIA_RETURN:a                                                                                          {: RESULT = a; :}
    |   SENTENCIA_BREAK:a puco                                                                                      {: RESULT = a; :}
    |   SENTENCIA_CONTINUE:a puco                                                                                   {: RESULT = a; :}
    |   SENTENCIA_RETURN:a puco                                                                                     {: RESULT = a; :}
    |   SENTENCIA_LLAMADA:a                                                                                         {: RESULT = a; :}
    |   SENTENCIA_LLAMADA:a puco                                                                                    {: RESULT = a; :}
    |   SENTENCIA_PRINT:a                                                                                           {: RESULT = a; :}
    |   SENTENCIA_PRINT:a puco                                                                                      {: RESULT = a; :}
    |   SENTENCIA_PIE:a                                                                                             {: /*RESULT = a;*/ :}
    |   SENTENCIA_BARPLOT:a                                                                                         {: /*RESULT = a;*/ :}
    |   SENTENCIA_PLOT:a                                                                                            {: /*RESULT = a;*/ :}
    |   SENTENCIA_HIST:a                                                                                            {: /*RESULT = a;*/ :}
    |   SENTENCIA_PIE:a puco                                                                                        {: /*RESULT = a;*/ :}
    |   SENTENCIA_BARPLOT:a puco                                                                                    {: /*RESULT = a;*/ :}
    |   SENTENCIA_PLOT:a puco                                                                                       {: /*RESULT = a;*/ :}
    |   SENTENCIA_HIST:a puco                                                                                       {: /*RESULT = a;*/ :}
    |   error puco                                                                                                  {: RESULT = new Nodo(0, 0, archivo, ETipoNodo.ERROR); :}
    |   error llave_c                                                                                               {: RESULT = new Nodo(0, 0, archivo, ETipoNodo.ERROR); :}
;

BLOQUE
    ::= llave_a llave_c                                                                                             {: RESULT = new LinkedList<>(); :}
    |   llave_a LISTA_INSTRUCCIONES:a llave_c                                                                       {: RESULT = a; :}
;

// +----------------------------------------------------------------------+
// | ----------------- SENTENCIA DECLARACIÓN DE FUNCIÓN ----------------- |
// +----------------------------------------------------------------------+

DECASI_FUNCION
    ::= identificador:a igual r_function PARAMETROS_FUNCION:b BLOQUE:c                                              {: RESULT = new NFunc(aright, aleft, archivo, a, b, c); :}
    |   identificador:a igual par_a par_c flecha BLOQUE:b                                                           {: RESULT = new NFunc(aright, aleft, archivo, a, new LinkedList<>(), b); :}
    |   identificador:a igual par_a EXPRESION:b par_c flecha BLOQUE:c                                               {: RESULT = new NFunc(aright, aleft, archivo, a, b, c); :}
    |   identificador:a igual par_a identificador:b igual EXPRESION:c par_c flecha BLOQUE:d                         {: RESULT = new NFunc(aright, aleft, archivo, a, new LinkedList<NParam>(Arrays.asList(new NParam(bright, bleft, archivo, b, c))), d); :}
    |   identificador:a igual par_a PARAMETRO:b coma LISTA_PARAM_FUNCION:c par_c flecha BLOQUE:d                    {: c.addFirst(b);  RESULT = new NFunc(aright, aleft, archivo, a, c, d); :}
;

PARAMETROS_FUNCION
    ::= par_a par_c                                                                                                 {: RESULT = new LinkedList<>(); :}
    |   par_a LISTA_PARAM_FUNCION:a par_c                                                                           {: RESULT = a; :}
;

LISTA_PARAM_FUNCION
    ::= LISTA_PARAM_FUNCION:a coma PARAMETRO:b                                                                      {: RESULT = a;  RESULT.add(b); :}
    |   PARAMETRO:a                                                                                                 {: RESULT = new LinkedList<>();  RESULT.add(a); :}
;

PARAMETRO
    ::= identificador:a                                                                                             {: RESULT = new NParam(aright, aleft, archivo, a); :}
    |   identificador:a igual EXPRESION:b                                                                           {: RESULT = new NParam(aright, aleft, archivo, a, b); :}
;

// +-----------------------------------------------------------------------+
// | ----------------- SENTENCIA DECLARACIÓN DE VARIABLE ----------------- |
// +-----------------------------------------------------------------------+

DECASI_VARIABLE
    ::= identificador:a igual EXPRESION:b                                                                           {: RESULT = new NDecAsi(aright, aleft, archivo, a, b); :}
    |   identificador:a LISTA_ACCESO:b igual EXPRESION:c                                                            {: RESULT = new NAsiEdd(aright, aleft, archivo, a, b, c); :}
;

LISTA_ACCESO
    ::= LISTA_ACCESO:a ACCESO:b                                                                                     {: RESULT = a;  RESULT.add(b); :}
    |   ACCESO:a                                                                                                    {: RESULT = new LinkedList<>();  RESULT.add(a); :}
;

ACCESO
    ::= cor_a EXPRESION:a cor_c                                                                                     {: RESULT = new Dimension(ETipoDimension.SIMPLE, a); :}
    |   cor_a coma EXPRESION:a cor_c                                                                                {: RESULT = new Dimension(ETipoDimension.COLUMN, a); :}
    |   cor_a EXPRESION:a coma cor_c                                                                                {: RESULT = new Dimension(ETipoDimension.ROW, a); :}
    |   cor_a cor_a EXPRESION:a cor_c cor_c                                                                         {: RESULT = new Dimension(ETipoDimension.INNER, a); :}
    |   cor_a EXPRESION:a coma EXPRESION:b cor_c                                                                    {: RESULT = new Dimension(ETipoDimension.COMPOUND, a, b); :}
;

// +--------------------------------------------------+
// | ----------------- SENTENCIA IF ----------------- |
// +--------------------------------------------------+

SENTENCIA_IF
    ::= SIF:a                                                                                                       {: RESULT = a; :}
    |   SIF:a SELSE:b                                                                                               {: a.setSecIf(b);  RESULT = a; :}
;

SIF
    ::= r_if:a par_a EXPRESION:b par_c BLOQUE:c                                                                     {: RESULT = new NIf(aright, aleft, archivo, b, c, ETipoNodo.STMT_IF); :}
;

SELSE
    ::= r_else:a BLOQUE:b                                                                                           {: RESULT = new LinkedList<NIf>(); RESULT.add(new NIf(aright, aleft, archivo, b)); :}
    |   LISTA_ELIF:a r_else:b BLOQUE:c                                                                              {: RESULT = a;  RESULT.add(new NIf(bright, bleft, archivo, c)); :}
    |   LISTA_ELIF:a                                                                                                {: RESULT = a; :}
;

LISTA_ELIF
    ::= LISTA_ELIF:a ELSE_IF:b                                                                                      {: RESULT = a; RESULT.add(b); :}
    |   ELSE_IF:a                                                                                                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

ELSE_IF
    ::= r_else:a r_if par_a EXPRESION:b par_c BLOQUE:c                                                              {: RESULT = new NIf(aright, aleft, archivo, b, c, ETipoNodo.STMT_ELSE_IF); :}
;

// +------------------------------------------------------+
// | ----------------- SENTENCIA SWITCH ----------------- |
// +------------------------------------------------------+

SENTENCIA_SWITCH
    ::= r_switch:a par_a EXPRESION:b par_c llave_a LISTA_CASES:c llave_c                                            {: /*RESULT = new NSwitch(aright, aleft, archivo, b, c);*/ :}
    |   r_switch:a par_a EXPRESION:b par_c llave_a LISTA_CASES:c r_default dospu LISTA_INSTRUCCIONES:d llave_c      {: /*RESULT = new NSwitch(aright, aleft, archivo, b, c, d);*/ :}
;

LISTA_CASES
    ::= LISTA_CASES:a CASE:b                                                                                        {: /*RESULT = a;  RESULT.add(b);*/ :}
    |   CASE:a                                                                                                      {: /*RESULT = new LinkedList<>();  RESULT.add(a);*/ :}
;

CASE
    ::= r_case:a EXPRESION:b dospu LISTA_INSTRUCCIONES:c                                                            {: /*RESULT = new NCase(aright, aleft, archivo, b, c);*/ :}
;

// +-----------------------------------------------------+
// | ----------------- SENTENCIA WHILE ----------------- |
// +-----------------------------------------------------+

SENTENCIA_WHILE
    ::= r_while:a par_a EXPRESION:b par_c BLOQUE:c                                                                  {: /*RESULT = new NWhile(aright, aleft, archivo, b, c);*/ :}
;

// +--------------------------------------------------------+
// | ----------------- SENTENCIA DO WHILE ----------------- |
// +--------------------------------------------------------+

SENTENCIA_DOWHILE
    ::= r_do:a BLOQUE:b r_while par_a EXPRESION:c par_c                                                             {: /*RESULT = new NDoWhile(aright, aleft, archivo, b, c);*/ :}
;

// +---------------------------------------------------+
// | ----------------- SENTENCIA FOR ----------------- |
// +---------------------------------------------------+

SENTENCIA_FOR
    ::= r_for:a par_a identificador:b r_in EXPRESION:c par_c BLOQUE:d                                               {: /*RESULT = new NFor(aright, aleft, archivo, b, c, d);*/ :}
;

// +-----------------------------------------------------+
// | ----------------- SENTENCIA BREAK ----------------- |
// +-----------------------------------------------------+

SENTENCIA_BREAK
    ::= r_break:a                                                                                                   {: RESULT = new NBreak(aright, aleft, archivo); :}
;

// +--------------------------------------------------------+
// | ----------------- SENTENCIA CONTINUE ----------------- |
// +--------------------------------------------------------+

SENTENCIA_CONTINUE
    ::= r_continue:a                                                                                                {: RESULT = new NContinue(aright, aleft, archivo); :}
;

// +------------------------------------------------------+
// | ----------------- SENTENCIA RETURN ----------------- |
// +------------------------------------------------------+

SENTENCIA_RETURN
    ::= r_return:a                                                                                                  {: RESULT = new NReturn(aright, aleft, archivo); :}
    |   r_return:a par_a EXPRESION:b par_c                                                                          {: RESULT = new NReturn(aright, aleft, archivo, b); :}
;

// +-----------------------------------------------------------------+
// | ----------------- SENTENCIA LLAMADA A FUNCIÓN ----------------- |
// +-----------------------------------------------------------------+

SENTENCIA_LLAMADA
    ::= identificador:a PARAMETROS_LLAMADA:b                                                                        {: RESULT = new NCall(aright, aleft, archivo, a, b); :}
;

PARAMETROS_LLAMADA
    ::= par_a par_c                                                                                                 {: RESULT = new LinkedList<>(); :}
    |   par_a LISTA_EXPRESIONES:a par_c                                                                             {: RESULT = a; :}
;

LISTA_EXPRESIONES
    ::= LISTA_EXPRESIONES:a coma EXPRESION:b                                                                        {: RESULT = a;  RESULT.add(b); :}
    |   LISTA_EXPRESIONES:a coma r_default:b                                                                        {: RESULT = a;  RESULT.add(new NDefault(bright, bleft, archivo)); :}
    |   EXPRESION:a                                                                                                 {: RESULT = new LinkedList<>();  RESULT.add(a); :}
    |   r_default:a                                                                                                 {: RESULT = new LinkedList<>();  RESULT.add(new NDefault(aright, aleft, archivo)); :}
;

// +-----------------------------------------------------+
// | ----------------- SENTENCIA PRINT ----------------- |
// +-----------------------------------------------------+

SENTENCIA_PRINT
    ::= r_print:a par_a EXPRESION:b par_c                                                                           {: RESULT = new NPrint(aright, aleft, archivo, b); :}
;

// +---------------------------------------------------+
// | ----------------- SENTENCIA PIE ----------------- |
// +---------------------------------------------------+

SENTENCIA_PIE
    ::= r_pie:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d par_c                                           {: /*RESULT = new NPie(aright, aleft, archivo, b, c, d);*/ :}
;

// +-------------------------------------------------------+
// | ----------------- SENTENCIA BARPLOT ----------------- |
// +-------------------------------------------------------+

SENTENCIA_BARPLOT
    ::= r_barplot:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e coma EXPRESION:f par_c     {: /*RESULT = new NBarPlot(aright, aleft, archivo, b, c, d, e, f);*/ :}
;

// +----------------------------------------------------+
// | ----------------- SENTENCIA PLOT ----------------- |
// +----------------------------------------------------+

SENTENCIA_PLOT
    ::= r_plot:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e coma EXPRESION:f par_c        {: /*RESULT = new NPlot(aright, aleft, archivo, b, c, d, e, f);*/ :}
    |   r_plot:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e coma EXPRESION:f coma EXPRESION:g coma EXPRESION:h coma EXPRESION:i par_c     {: /*RESULT = new NDispersion(aright, aleft, archivo, b, c, d, e, f, g, h, i);*/ :}
;

// +----------------------------------------------------+
// | ----------------- SENTENCIA HIST ----------------- |
// +----------------------------------------------------+

SENTENCIA_HIST
    ::= r_hist:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e coma EXPRESION:f par_c        {: /*RESULT = new NHist(aright, aleft, archivo, b, c, d, e, f);*/ :}
;

// +-------------------------------------------------+
// | ----------------- EXPRESIONES ----------------- |
// +-------------------------------------------------+

EXPRESION
    ::= EXPRESION:a and EXPRESION:b                                                                                 {: RESULT = new NAnd(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a or EXPRESION:b                                                                                  {: RESULT = new NOr(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a igualdad EXPRESION:b                                                                            {: RESULT = new NIgualdad(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a diferente_que EXPRESION:b                                                                       {: RESULT = new NDiferente(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a mayor EXPRESION:b                                                                               {: RESULT = new NMayor(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a menor EXPRESION:b                                                                               {: RESULT = new NMenor(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a mayor_igual EXPRESION:b                                                                         {: RESULT = new NMayorIgual(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a menor_igual EXPRESION:b                                                                         {: RESULT = new NMenorIgual(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a mas EXPRESION:b                                                                                 {: RESULT = new NSuma(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a menos EXPRESION:b                                                                               {: RESULT = new NResta(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a por EXPRESION:b                                                                                 {: RESULT = new NMultiplicacion(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a div EXPRESION:b                                                                                 {: RESULT = new NDivision(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a mod EXPRESION:b                                                                                 {: RESULT = new NModulo(aright, aleft, archivo, a, b); :}
    |   EXPRESION:a pot EXPRESION:b                                                                                 {: RESULT = new NPotencia(aright, aleft, archivo, a, b); :}
    |   menos EXPRESION:a                                                                                           {: RESULT = new NNegativo(aright, aleft, archivo, a); :}   %prec uminus
    |   not EXPRESION:a                                                                                             {: RESULT = new NNot(aright, aleft, archivo, a); :}
    |   EXPRESION:b interrogacion:a EXPRESION:c dospu EXPRESION:d                                                   {: /*RESULT = new NTernario(aright, aleft, archivo, b, c, d);*/ :}
    |   par_a EXPRESION:a par_c                                                                                     {: RESULT = a; :}
    |   SENTENCIA_LLAMADA:a                                                                                         {: RESULT = a; :}
    |   numero_entero:a                                                                                             {: RESULT = new NPrim(aright, aleft, archivo, Integer.parseInt(a), ETipoDato.INT); :}
    |   numero_decimal:a                                                                                            {: RESULT = new NPrim(aright, aleft, archivo, Double.parseDouble(a), ETipoDato.DECIMAL); :}
    |   cadena:a                                                                                                    {: RESULT = new NPrim(aright, aleft, archivo, a, ETipoDato.STRING); :}
    |   r_true:a                                                                                                    {: RESULT = new NPrim(aright, aleft, archivo, true, ETipoDato.BOOLEAN); :}
    |   r_false:a                                                                                                   {: RESULT = new NPrim(aright, aleft, archivo, false, ETipoDato.BOOLEAN); :}
    |   r_nulo:a                                                                                                    {: RESULT = new NNulo(aright, aleft, archivo); :}
    |   r_c:a par_a LISTA_EXPRESIONES:b par_c                                                                       {: RESULT = new NFC(aright, aleft, archivo, b); :}
    |   r_list:a par_a LISTA_EXPRESIONES:b par_c                                                                    {: RESULT = new NList(aright, aleft, archivo, b); :}
    |   r_array:a par_a EXPRESION:b coma EXPRESION:c par_c                                                          {: RESULT = new NArray(aright, aleft, archivo, b, c); :}
    |   r_matrix:a par_a EXPRESION:b coma EXPRESION:c coma EXPRESION:d par_c                                        {: RESULT = new NMatrix(aright, aleft, archivo, b, c, d); :}
    |   r_typeof:a par_a EXPRESION:b par_c                                                                          {: /*RESULT = new NTypeOf(aright, aleft, archivo, b);*/ :}
    |   r_length:a par_a EXPRESION:b par_c                                                                          {: /*RESULT = new NLength(aright, aleft, archivo, b);*/ :}
    |   r_ncol:a par_a EXPRESION:b par_c                                                                            {: /*RESULT = new NCol(aright, aleft, archivo, b);*/ :}
    |   r_nrow:a par_a EXPRESION:b par_c                                                                            {: /*RESULT = new NRow(aright, aleft, archivo, b);*/ :}
    |   r_stringlength:a par_a EXPRESION:b par_c                                                                    {: /*RESULT = new NStringLength(aright, aleft, archivo, b);*/ :}
    |   r_remove:a par_a EXPRESION:b coma EXPRESION:c par_c                                                         {: /*RESULT = new NRemove(aright, aleft, archivo, b, c);*/ :}
    |   r_tolowercase:a par_a EXPRESION:b par_c                                                                     {: /*RESULT = new NToLower(aright, aleft, archivo, b);*/ :}
    |   r_touppercase:a par_a EXPRESION:b par_c                                                                     {: /*RESULT = new NToUpper(aright, aleft, archivo, b);*/ :}
    |   r_trunk:a par_a EXPRESION:b par_c                                                                           {: /*RESULT = new NTrunk(aright, aleft, archivo, b);*/ :}
    |   r_round:a par_a EXPRESION:b par_c                                                                           {: /*RESULT = new NRound(aright, aleft, archivo, b);*/ :}
    |   r_mean:a par_a EXPRESION:b par_c                                                                            {: /*RESULT = new NMean(arigth, aleft, archivo, b);*/ :}
    |   r_median:a par_a EXPRESION:b par_c                                                                          {: /*RESULT = new NMedian(aright, aleft, archivo, b);*/ :}
    |   r_mode:a par_a EXPRESION:b par_c                                                                            {: /*RESULT = new NMode(aright, aleft, archivo, b);*/ :}
    |   r_mean:a par_a EXPRESION:b coma EXPRESION:c par_c                                                           {: /*RESULT = new NMean(aright, aleft, archivo, b, c);*/ :}
    |   r_median:a par_a EXPRESION:b coma EXPRESION:c par_c                                                         {: /*RESULT = new NMedian(aright, aleft, archivo, b, c);*/ :}
    |   r_mode:a par_a EXPRESION:b coma EXPRESION:c par_c                                                           {: /*RESULT = new NMode(aright, aleft, archivo, b, c);*/ :}
    |   identificador:a                                                                                             {: RESULT = new NId(aright, aleft, archivo, a); :}
    |   identificador:a LISTA_ACCESO:b                                                                              {: RESULT = new NAcceso(aright, aleft, archivo, a, b); :}
;









