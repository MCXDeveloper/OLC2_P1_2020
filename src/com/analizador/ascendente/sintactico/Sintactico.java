
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.analizador.ascendente.sintactico;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CUPSim.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\042" +
    "\004\000\002\042\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\014\004\000\002\014\003\000" +
    "\002\014\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\006\004" +
    "\000\002\006\005\000\002\022\007\000\002\022\010\000" +
    "\002\022\011\000\002\022\013\000\002\022\013\000\002" +
    "\037\004\000\002\037\005\000\002\043\005\000\002\043" +
    "\003\000\002\011\003\000\002\011\005\000\002\025\005" +
    "\000\002\025\006\000\002\016\004\000\002\016\003\000" +
    "\002\007\005\000\002\007\006\000\002\007\006\000\002" +
    "\007\007\000\002\007\007\000\002\017\003\000\002\017" +
    "\004\000\002\003\007\000\002\005\004\000\002\005\005" +
    "\000\002\005\003\000\002\013\004\000\002\013\003\000" +
    "\002\010\010\000\002\031\011\000\002\031\014\000\002" +
    "\015\004\000\002\015\003\000\002\004\006\000\002\026" +
    "\007\000\002\033\010\000\002\020\011\000\002\027\003" +
    "\000\002\040\003\000\002\032\003\000\002\032\006\000" +
    "\002\034\004\000\002\041\004\000\002\041\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\003\000\002\035" +
    "\003\000\002\030\006\000\002\021\012\000\002\036\016" +
    "\000\002\023\016\000\002\023\024\000\002\024\016\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\004\000\002" +
    "\012\007\000\002\012\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\006\000\002\012\006\000" +
    "\002\012\010\000\002\012\012\000\002\012\006\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\012\010\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\012\003\000\002\012" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\036\006\011\010\032\013\035\014\036\015" +
    "\030\016\021\017\017\020\014\023\037\043\004\044\042" +
    "\045\023\046\040\105\045\001\002\000\004\060\u0159\001" +
    "\002\000\046\002\ufffe\006\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\023" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\100\ufffe\105\ufffe" +
    "\001\002\000\050\002\ufff3\006\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\023\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\065\u0158\100" +
    "\ufff3\105\ufff3\001\002\000\050\002\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\023\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\065\u0157\100\ufff4\105\ufff4\001\002\000\040\002\000\006" +
    "\011\010\032\013\035\014\036\015\030\016\021\017\017" +
    "\020\014\023\037\043\004\044\042\045\023\046\040\105" +
    "\045\001\002\000\004\060\u0153\001\002\000\046\002\ufff5" +
    "\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\100\ufff5\105\ufff5\001\002\000\050\002" +
    "\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\023\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\065\u0152\100\uffec\105\uffec\001\002" +
    "\000\004\077\323\001\002\000\050\002\uffe8\006\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\023\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\065\u014c\100\uffe8\105\uffe8\001\002\000\050\002\uffcc" +
    "\006\uffcc\007\u0140\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\023\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\100\uffcc\105\uffcc\001\002\000" +
    "\004\060\u0139\001\002\000\050\002\ufff2\006\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\023\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\065\u0138\100\ufff2\105\ufff2\001\002\000\004\060\u0134\001" +
    "\002\000\046\002\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\023" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\100\ufff9\105\ufff9" +
    "\001\002\000\004\060\u0122\001\002\000\046\002\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\023\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\100\ufffa\105\ufffa\001\002\000\050\002\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\023\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\065\u0121\100\ufffc\105\ufffc\001\002\000" +
    "\046\002\ufffd\006\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\023\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\100\ufffd\105\ufffd\001\002" +
    "\000\050\002\ufff7\006\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\023\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\065\u0120\100\ufff7\105" +
    "\ufff7\001\002\000\052\002\uffb9\006\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\023\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\060\u011d" +
    "\065\uffb9\100\uffb9\105\uffb9\001\002\000\046\002\ufff8\006" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\023\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\100\ufff8\105\ufff8\001\002\000\004\060\u010d" +
    "\001\002\000\050\002\uffee\006\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\023\uffee\043\uffee\044\uffee\045\uffee\046\uffee\065\u010c\100" +
    "\uffee\105\uffee\001\002\000\050\002\uffe7\006\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\023\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\065\u010b\100\uffe7\105\uffe7\001\002\000\050\002\uffbb\006" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\023\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\065\uffbb\100\uffbb\105\uffbb\001\002\000\050" +
    "\002\uffba\006\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\023\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\065\uffba\100\uffba\105\uffba\001" +
    "\002\000\004\060\u0108\001\002\000\004\060\375\001\002" +
    "\000\050\002\uffea\006\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\065\374\100\uffea\105" +
    "\uffea\001\002\000\004\060\361\001\002\000\050\002\uffe9" +
    "\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\023\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\065\360\100\uffe9\105\uffe9\001\002\000" +
    "\004\002\357\001\002\000\010\060\050\062\051\076\047" +
    "\001\002\000\122\002\uffd2\006\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\023\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\100\uffd2" +
    "\101\uffd2\102\uffd2\105\uffd2\001\002\000\072\004\070\005" +
    "\062\022\310\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\311\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\074\004\070\005\062\012\207\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\061" +
    "\306\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\074\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\062\271\064\270\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\050\002" +
    "\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\023\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\065\uffb7\100\uffb7\105\uffb7\001\002" +
    "\000\006\062\051\076\055\001\002\000\122\002\uffd3\006" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\023\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3" +
    "\075\uffd3\076\uffd3\100\uffd3\101\uffd3\102\uffd3\105\uffd3\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\004\060\263\001\002" +
    "\000\116\002\uff96\006\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\023\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\061\uff96\063\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\100\uff96\101\uff96\102\uff96\105\uff96" +
    "\001\002\000\004\060\260\001\002\000\004\060\252\001" +
    "\002\000\116\002\uff93\006\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\023" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\uff93\061\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\100\uff93\101\uff93\102\uff93\105" +
    "\uff93\001\002\000\004\060\244\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\004\060\240\001\002\000\004\060\235\001" +
    "\002\000\004\060\232\001\002\000\004\060\227\001\002" +
    "\000\004\060\224\001\002\000\004\060\216\001\002\000" +
    "\004\060\206\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\004" +
    "\060\202\001\002\000\004\060\173\001\002\000\116\002" +
    "\uff95\006\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\020\uff95\023\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\061\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\100\uff95\101\uff95\102\uff95\105\uff95\001\002\000" +
    "\004\060\170\001\002\000\116\002\uff97\006\uff97\010\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\023\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\061" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\100\uff97\101" +
    "\uff97\102\uff97\105\uff97\001\002\000\116\002\uff98\006\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\023\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\061\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\100" +
    "\uff98\101\uff98\102\uff98\105\uff98\001\002\000\004\060\163" +
    "\001\002\000\116\002\uff94\006\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\023\uff94\043\uff94\044\uff94\045\uff94\046\uff94\052\uff94\053" +
    "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\061\uff94\063\uff94" +
    "\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072" +
    "\uff94\073\uff94\074\uff94\075\uff94\100\uff94\101\uff94\102\uff94" +
    "\105\uff94\001\002\000\004\060\160\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\106\002\uffd4\006\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\023\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\052\132" +
    "\053\122\054\131\055\115\056\126\057\127\065\uffd4\067" +
    "\130\070\123\071\133\072\124\073\125\074\121\075\134" +
    "\100\uffd4\101\117\102\120\105\uffd4\001\002\000\004\060" +
    "\113\001\002\000\120\002\uff7e\006\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020" +
    "\uff7e\023\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\061\uff7e\062" +
    "\051\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\100\uff7e\101" +
    "\uff7e\102\uff7e\105\uff7e\001\002\000\120\002\uff7d\006\uff7d" +
    "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\023\uff7d\043\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\061\uff7d\062\051\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\100\uff7d\101\uff7d\102\uff7d\105\uff7d\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\042\052\132\053\122\054\131\055" +
    "\115\056\126\057\127\061\116\067\130\070\123\071\133" +
    "\072\124\073\125\074\121\075\134\101\117\102\120\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\116\002\uff8d\006\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\023\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\105\uff8d\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\070\004\070\005\062\024\105\025\110\026" +
    "\056\027\076\030\073\031\067\032\071\033\060\034\075" +
    "\035\066\036\065\037\100\040\072\041\061\042\063\047" +
    "\103\050\077\051\104\053\074\060\106\103\064\105\111" +
    "\106\102\107\101\110\057\001\002\000\070\004\070\005" +
    "\062\024\105\025\110\026\056\027\076\030\073\031\067" +
    "\032\071\033\060\034\075\035\066\036\065\037\100\040" +
    "\072\041\061\042\063\047\103\050\077\051\104\053\074" +
    "\060\106\103\064\105\111\106\102\107\101\110\057\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\070\004\070\005\062\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\070\004\070\005\062\024\105\025\110" +
    "\026\056\027\076\030\073\031\067\032\071\033\060\034" +
    "\075\035\066\036\065\037\100\040\072\041\061\042\063" +
    "\047\103\050\077\051\104\053\074\060\106\103\064\105" +
    "\111\106\102\107\101\110\057\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\116\002\uffa8\006\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\023\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\052\132\053" +
    "\122\054\131\055\115\056\126\057\127\061\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\123\071\133\072" +
    "\124\073\125\074\uffa8\075\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\105\uffa8\001\002\000\106\002\uffa6\006\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\023\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\061\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\074\uffa6\075" +
    "\uffa6\100\uffa6\101\uffa6\102\uffa6\105\uffa6\001\002\000\116" +
    "\002\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\023\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\052\uffa2\053\uffa2\054\131\055" +
    "\115\056\126\057\127\061\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\100\uffa2\101\uffa2\102\uffa2\105\uffa2\001\002" +
    "\000\116\002\uffa0\006\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\100\uffa0\101\uffa0\102\uffa0\105\uffa0" +
    "\001\002\000\042\052\132\053\122\054\131\055\115\056" +
    "\126\057\127\066\142\067\130\070\123\071\133\072\124" +
    "\073\125\074\121\075\134\101\117\102\120\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\116\002\uff9a\006\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\023\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\052\132\053\122\054\131\055\115\056\126\057\127\061" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\100\uff9a\101" +
    "\117\102\120\105\uff9a\001\002\000\116\002\uff9e\006\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\023\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\100" +
    "\uff9e\101\uff9e\102\uff9e\105\uff9e\001\002\000\116\002\uff9d" +
    "\006\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\105\uff9d\001\002\000\106" +
    "\002\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\052\132\053\122\054\131\055" +
    "\115\056\126\057\127\061\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\074\uffa4\075\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\105\uffa4\001\002\000\106\002\uffa3\006\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\023\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\052\132\053\122\054\131\055\115\056\126\057\127\061" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\074\uffa3" +
    "\075\uffa3\100\uffa3\101\uffa3\102\uffa3\105\uffa3\001\002\000" +
    "\106\002\uffa5\006\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\023\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\uffa5\063\uffa5\064\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\074\uffa5\075\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\105\uffa5\001\002\000\116\002\uffa1\006\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\023\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\052\uffa1\053\uffa1\054\131\055\115\056\126\057\127" +
    "\061\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\105\uffa1\001\002\000\116\002\uffa7\006" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\023\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\052\132\053\122\054\131\055\115\056\126" +
    "\057\127\061\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\070\123\071\133\072\124\073\125\074\uffa7\075\uffa7" +
    "\100\uffa7\101\uffa7\102\uffa7\105\uffa7\001\002\000\116\002" +
    "\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\023\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\061\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\123\071\133\072\124\073\125\074\121" +
    "\075\134\100\uffaa\101\uffaa\102\uffaa\105\uffaa\001\002\000" +
    "\116\002\uffa9\006\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\023\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\100\uffa9\101\uffa9\102\120\105\uffa9\001" +
    "\002\000\116\002\uff9f\006\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\023" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\100\uff9f\101\uff9f\102\uff9f\105" +
    "\uff9f\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\061\157\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\116\002\uff99\006\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\023\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\061\uff99\063\uff99\064\uff99" +
    "\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\100\uff99\101\uff99\102\uff99\105\uff99" +
    "\001\002\000\070\004\070\005\062\024\105\025\110\026" +
    "\056\027\076\030\073\031\067\032\071\033\060\034\075" +
    "\035\066\036\065\037\100\040\072\041\061\042\063\047" +
    "\103\050\077\051\104\053\074\060\106\103\064\105\111" +
    "\106\102\107\101\110\057\001\002\000\042\052\132\053" +
    "\122\054\131\055\115\056\126\057\127\061\162\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\116\002\uff8e\006\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\023\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\061" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\105\uff8e\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\064\165\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\061\167\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\116\002\uff89\006\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\023\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\061\uff89\063\uff89\064\uff89" +
    "\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073" +
    "\uff89\074\uff89\075\uff89\100\uff89\101\uff89\102\uff89\105\uff89" +
    "\001\002\000\070\004\070\005\062\024\105\025\110\026" +
    "\056\027\076\030\073\031\067\032\071\033\060\034\075" +
    "\035\066\036\065\037\100\040\072\041\061\042\063\047" +
    "\103\050\077\051\104\053\074\060\106\103\064\105\111" +
    "\106\102\107\101\110\057\001\002\000\042\052\132\053" +
    "\122\054\131\055\115\056\126\057\127\061\172\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\116\002\uff85\006\uff85\010\uff85" +
    "\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017" +
    "\uff85\020\uff85\023\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\061" +
    "\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\100\uff85\101" +
    "\uff85\102\uff85\105\uff85\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\064\175\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\064\177\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\042\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\201\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\116\002\uff8f\006\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\023\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\061\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\105\uff8f\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\042" +
    "\052\132\053\122\054\131\055\115\056\126\057\127\061" +
    "\204\067\130\070\123\071\133\072\124\073\125\074\121" +
    "\075\134\101\117\102\120\001\002\000\116\002\uff88\006" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\023\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88" +
    "\057\uff88\061\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88" +
    "\100\uff88\101\uff88\102\uff88\105\uff88\001\002\000\116\002" +
    "\uff9c\006\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\023\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\061\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\100\uff9c\101\uff9c\102\uff9c\105\uff9c\001\002\000" +
    "\072\004\070\005\062\012\207\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\006\061\uffb1\064\uffb1" +
    "\001\002\000\006\061\212\064\213\001\002\000\044\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\061\uffb2" +
    "\064\uffb2\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\116\002\uff91" +
    "\006\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\023\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\061\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075" +
    "\uff91\100\uff91\101\uff91\102\uff91\105\uff91\001\002\000\072" +
    "\004\070\005\062\012\214\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\006\061\uffb3\064\uffb3\001" +
    "\002\000\044\052\132\053\122\054\131\055\115\056\126" +
    "\057\127\061\uffb4\064\uffb4\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\044\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\221\064\220\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\116" +
    "\002\uff84\006\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\023\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\057\uff84\061\uff84\063\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\100\uff84\101\uff84\102\uff84\105\uff84\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\061\223\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\116\002" +
    "\uff81\006\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81" +
    "\015\uff81\016\uff81\017\uff81\020\uff81\023\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\057\uff81\061\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81" +
    "\075\uff81\100\uff81\101\uff81\102\uff81\105\uff81\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\042\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\226\067\130\070\123\071" +
    "\133\072\124\073\125\074\121\075\134\101\117\102\120" +
    "\001\002\000\116\002\uff8b\006\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\023\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\061\uff8b\063\uff8b" +
    "\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\074\uff8b\075\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\105\uff8b\001\002\000\072\004\070\005\062\012\207\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\006\061\231\064\213\001\002\000\116\002\uff92\006\uff92" +
    "\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\023\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057" +
    "\uff92\061\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92" +
    "\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\100" +
    "\uff92\101\uff92\102\uff92\105\uff92\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\042\052\132\053\122\054\131\055\115\056" +
    "\126\057\127\061\234\067\130\070\123\071\133\072\124" +
    "\073\125\074\121\075\134\101\117\102\120\001\002\000" +
    "\116\002\uff8c\006\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\023\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\061\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\100\uff8c\101\uff8c\102\uff8c\105\uff8c\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\042\052\132\053\122" +
    "\054\131\055\115\056\126\057\127\061\237\067\130\070" +
    "\123\071\133\072\124\073\125\074\121\075\134\101\117" +
    "\102\120\001\002\000\116\002\uff87\006\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\023\uff87\043\uff87\044\uff87\045\uff87\046\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\061\uff87" +
    "\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\073\uff87\074\uff87\075\uff87\100\uff87\101\uff87" +
    "\102\uff87\105\uff87\001\002\000\070\004\070\005\062\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\061\242\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\116\002\uff86" +
    "\006\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\023\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056" +
    "\uff86\057\uff86\061\uff86\063\uff86\064\uff86\065\uff86\066\uff86" +
    "\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075" +
    "\uff86\100\uff86\101\uff86\102\uff86\105\uff86\001\002\000\116" +
    "\002\uff9b\006\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\023\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\057\uff9b\061\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\100\uff9b\101\uff9b\102\uff9b\105\uff9b\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\044\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\247\064\246\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\116" +
    "\002\uff82\006\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014" +
    "\uff82\015\uff82\016\uff82\017\uff82\020\uff82\023\uff82\043\uff82" +
    "\044\uff82\045\uff82\046\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\061\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074" +
    "\uff82\075\uff82\100\uff82\101\uff82\102\uff82\105\uff82\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\061\251\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\116\002" +
    "\uff7f\006\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\020\uff7f\023\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\061\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\100\uff7f\101\uff7f\102\uff7f\105\uff7f\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\044\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\255\064\254\067\130\070" +
    "\123\071\133\072\124\073\125\074\121\075\134\101\117" +
    "\102\120\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\116\002" +
    "\uff83\006\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\023\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\056\uff83\057\uff83\061\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\100\uff83\101\uff83\102\uff83\105\uff83\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\061\257\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\116\002\uff80" +
    "\006\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uff80\016\uff80\017\uff80\020\uff80\023\uff80\043\uff80\044\uff80" +
    "\045\uff80\046\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\057\uff80\061\uff80\063\uff80\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075" +
    "\uff80\100\uff80\101\uff80\102\uff80\105\uff80\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\042\052\132\053\122\054\131\055" +
    "\115\056\126\057\127\061\262\067\130\070\123\071\133" +
    "\072\124\073\125\074\121\075\134\101\117\102\120\001" +
    "\002\000\116\002\uff8a\006\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\023" +
    "\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\057\uff8a\061\uff8a\063\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\100\uff8a\101\uff8a\102\uff8a\105" +
    "\uff8a\001\002\000\070\004\070\005\062\024\105\025\110" +
    "\026\056\027\076\030\073\031\067\032\071\033\060\034" +
    "\075\035\066\036\065\037\100\040\072\041\061\042\063" +
    "\047\103\050\077\051\104\053\074\060\106\103\064\105" +
    "\111\106\102\107\101\110\057\001\002\000\042\052\132" +
    "\053\122\054\131\055\115\056\126\057\127\064\265\067" +
    "\130\070\123\071\133\072\124\073\125\074\121\075\134" +
    "\101\117\102\120\001\002\000\070\004\070\005\062\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\061\267\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\116\002\uff90" +
    "\006\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\020\uff90\023\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\061\uff90\063\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\100\uff90\101\uff90\102\uff90\105\uff90\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\044\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\063\274" +
    "\064\273\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\072\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\063\275\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\122\002\uffd1\006\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\023\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\105\uffd1\001\002\000\122\002" +
    "\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\023\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\075\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf\105" +
    "\uffcf\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\063\277\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\122\002\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\105\uffcd\001\002\000\042\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\063\301\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\004\063\302\001\002\000\122\002\uffce" +
    "\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\023\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\075\uffce\076\uffce\100\uffce\101\uffce\102\uffce\105\uffce" +
    "\001\002\000\042\052\132\053\122\054\131\055\115\056" +
    "\126\057\127\063\304\067\130\070\123\071\133\072\124" +
    "\073\125\074\121\075\134\101\117\102\120\001\002\000" +
    "\122\002\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\023\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\105\uffd0\001\002\000\006\061\307\064\213\001\002" +
    "\000\050\002\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\065\uffb6\100\uffb6\105" +
    "\uffb6\001\002\000\050\002\uffb5\006\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\023\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\065\uffb5" +
    "\100\uffb5\105\uffb5\001\002\000\004\060\352\001\002\000" +
    "\072\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\061\313\103\064\105\316\106" +
    "\102\107\101\110\057\001\002\000\106\002\uffd5\006\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\023\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\065\uffd5\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\100\uffd5\101\117\102\120\105\uffd5\001" +
    "\002\000\004\104\347\001\002\000\004\064\334\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\061\331\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\050\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\061\uff7e" +
    "\062\051\064\uffd7\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\076\317\101\uff7e\102\uff7e\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\044\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\321\064\uffd6\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\004\104\322\001\002\000\004" +
    "\077\323\001\002\000\040\006\011\010\032\013\035\014" +
    "\036\015\030\016\021\017\017\020\014\023\037\043\004" +
    "\044\042\045\023\046\040\100\326\105\045\001\002\000" +
    "\046\002\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\100\uffdd\105\uffdd\001\002" +
    "\000\040\006\011\010\032\013\035\014\036\015\030\016" +
    "\021\017\017\020\014\023\037\043\004\044\042\045\023" +
    "\046\040\100\330\105\045\001\002\000\050\002\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\100\uffe2\105\uffe2\001\002\000\046" +
    "\002\uffff\006\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\023\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\100\uffff\105\uffff\001\002\000" +
    "\050\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\023" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\100\uffe1\105\uffe1" +
    "\001\002\000\110\002\uff99\006\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\023\uff99\043\uff99\044\uff99\045\uff99\046\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\065\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\100" +
    "\uff99\101\uff99\102\uff99\104\332\105\uff99\001\002\000\004" +
    "\077\323\001\002\000\046\002\uffde\006\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\023\uffde\043\uffde\044\uffde\045\uffde\046\uffde\100" +
    "\uffde\105\uffde\001\002\000\004\105\336\001\002\000\006" +
    "\061\342\064\343\001\002\000\010\061\uffd7\064\uffd7\076" +
    "\340\001\002\000\006\061\uffd8\064\uffd8\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\044\052\132\053\122\054\131\055" +
    "\115\056\126\057\127\061\uffd6\064\uffd6\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\004\104\345\001\002\000\004\105\336" +
    "\001\002\000\006\061\uffd9\064\uffd9\001\002\000\004\077" +
    "\323\001\002\000\046\002\uffdc\006\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\023\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\100\uffdc" +
    "\105\uffdc\001\002\000\004\077\323\001\002\000\046\002" +
    "\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\100\uffdf\105\uffdf\001\002\000\004" +
    "\077\323\001\002\000\006\061\354\105\336\001\002\000" +
    "\006\061\355\064\343\001\002\000\004\077\uffdb\001\002" +
    "\000\004\077\uffda\001\002\000\046\002\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\023\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\100\uffe0\105\uffe0\001\002\000\004\002\001\001\002" +
    "\000\046\002\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\100\uffe5\105\uffe5\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\042\052\132\053\122" +
    "\054\131\055\115\056\126\057\127\064\363\067\130\070" +
    "\123\071\133\072\124\073\125\074\121\075\134\101\117" +
    "\102\120\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\042\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\064\365" +
    "\067\130\070\123\071\133\072\124\073\125\074\121\075" +
    "\134\101\117\102\120\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\064\367\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\064\371\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\042\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\373\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\050\002\uffae\006\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\023\uffae\043\uffae\044\uffae\045\uffae\046\uffae\065\uffae" +
    "\100\uffae\105\uffae\001\002\000\046\002\uffe6\006\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\023\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\100\uffe6\105\uffe6\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\064\377\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\070\004" +
    "\070\005\062\024\105\025\110\026\056\027\076\030\073" +
    "\031\067\032\071\033\060\034\075\035\066\036\065\037" +
    "\100\040\072\041\061\042\063\047\103\050\077\051\104" +
    "\053\074\060\106\103\064\105\111\106\102\107\101\110" +
    "\057\001\002\000\042\052\132\053\122\054\131\055\115" +
    "\056\126\057\127\064\u0101\067\130\070\123\071\133\072" +
    "\124\073\125\074\121\075\134\101\117\102\120\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\042\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\064\u0103\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\070\004\070\005\062\024\105\025\110" +
    "\026\056\027\076\030\073\031\067\032\071\033\060\034" +
    "\075\035\066\036\065\037\100\040\072\041\061\042\063" +
    "\047\103\050\077\051\104\053\074\060\106\103\064\105" +
    "\111\106\102\107\101\110\057\001\002\000\042\052\132" +
    "\053\122\054\131\055\115\056\126\057\127\064\u0105\067" +
    "\130\070\123\071\133\072\124\073\125\074\121\075\134" +
    "\101\117\102\120\001\002\000\070\004\070\005\062\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\061\u0107\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\050\002\uffab" +
    "\006\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\023\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\065\uffab\100\uffab\105\uffab\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\042\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\u010a\067\130\070\123\071" +
    "\133\072\124\073\125\074\121\075\134\101\117\102\120" +
    "\001\002\000\050\002\uffb0\006\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\023\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\065\uffb0\100" +
    "\uffb0\105\uffb0\001\002\000\046\002\uffe3\006\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\023\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\100\uffe3\105\uffe3\001\002\000\046\002\uffed\006\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\023\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\100\uffed\105\uffed\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\061\u010f\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\004\077" +
    "\u0110\001\002\000\004\011\u0111\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\010\011\u0111\012\u0116\100\u0114\001\002\000" +
    "\010\011\uffc0\012\uffc0\100\uffc0\001\002\000\046\002\uffc3" +
    "\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\023\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\100\uffc3\105\uffc3\001\002\000\010\011" +
    "\uffc1\012\uffc1\100\uffc1\001\002\000\004\066\u0117\001\002" +
    "\000\036\006\011\010\032\013\035\014\036\015\030\016" +
    "\021\017\017\020\014\023\037\043\004\044\042\045\023" +
    "\046\040\105\045\001\002\000\040\006\011\010\032\013" +
    "\035\014\036\015\030\016\021\017\017\020\014\023\037" +
    "\043\004\044\042\045\023\046\040\100\u0119\105\045\001" +
    "\002\000\046\002\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\023" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\100\uffc2\105\uffc2" +
    "\001\002\000\042\052\132\053\122\054\131\055\115\056" +
    "\126\057\127\066\u011b\067\130\070\123\071\133\072\124" +
    "\073\125\074\121\075\134\101\117\102\120\001\002\000" +
    "\036\006\011\010\032\013\035\014\036\015\030\016\021" +
    "\017\017\020\014\023\037\043\004\044\042\045\023\046" +
    "\040\105\045\001\002\000\044\006\011\010\032\011\uffbf" +
    "\012\uffbf\013\035\014\036\015\030\016\021\017\017\020" +
    "\014\023\037\043\004\044\042\045\023\046\040\100\uffbf" +
    "\105\045\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\042\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\061\u011f" +
    "\067\130\070\123\071\133\072\124\073\125\074\121\075" +
    "\134\101\117\102\120\001\002\000\050\002\uffb8\006\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\023\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\065\uffb8\100\uffb8\105\uffb8\001\002\000\046\002" +
    "\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\100\ufff6\105\ufff6\001\002\000\046" +
    "\002\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\023\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\100\ufffb\105\ufffb\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\042\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\064\u0124\067\130\070\123\071" +
    "\133\072\124\073\125\074\121\075\134\101\117\102\120" +
    "\001\002\000\070\004\070\005\062\024\105\025\110\026" +
    "\056\027\076\030\073\031\067\032\071\033\060\034\075" +
    "\035\066\036\065\037\100\040\072\041\061\042\063\047" +
    "\103\050\077\051\104\053\074\060\106\103\064\105\111" +
    "\106\102\107\101\110\057\001\002\000\042\052\132\053" +
    "\122\054\131\055\115\056\126\057\127\064\u0126\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\042" +
    "\052\132\053\122\054\131\055\115\056\126\057\127\064" +
    "\u0128\067\130\070\123\071\133\072\124\073\125\074\121" +
    "\075\134\101\117\102\120\001\002\000\070\004\070\005" +
    "\062\024\105\025\110\026\056\027\076\030\073\031\067" +
    "\032\071\033\060\034\075\035\066\036\065\037\100\040" +
    "\072\041\061\042\063\047\103\050\077\051\104\053\074" +
    "\060\106\103\064\105\111\106\102\107\101\110\057\001" +
    "\002\000\042\052\132\053\122\054\131\055\115\056\126" +
    "\057\127\064\u012a\067\130\070\123\071\133\072\124\073" +
    "\125\074\121\075\134\101\117\102\120\001\002\000\070" +
    "\004\070\005\062\024\105\025\110\026\056\027\076\030" +
    "\073\031\067\032\071\033\060\034\075\035\066\036\065" +
    "\037\100\040\072\041\061\042\063\047\103\050\077\051" +
    "\104\053\074\060\106\103\064\105\111\106\102\107\101" +
    "\110\057\001\002\000\044\052\132\053\122\054\131\055" +
    "\115\056\126\057\127\061\u012d\064\u012c\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\070\004\070\005\062\024\105\025\110" +
    "\026\056\027\076\030\073\031\067\032\071\033\060\034" +
    "\075\035\066\036\065\037\100\040\072\041\061\042\063" +
    "\047\103\050\077\051\104\053\074\060\106\103\064\105" +
    "\111\106\102\107\101\110\057\001\002\000\050\002\uffad" +
    "\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\023\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\065\uffad\100\uffad\105\uffad\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\064\u012f\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\070\004\070" +
    "\005\062\024\105\025\110\026\056\027\076\030\073\031" +
    "\067\032\071\033\060\034\075\035\066\036\065\037\100" +
    "\040\072\041\061\042\063\047\103\050\077\051\104\053" +
    "\074\060\106\103\064\105\111\106\102\107\101\110\057" +
    "\001\002\000\042\052\132\053\122\054\131\055\115\056" +
    "\126\057\127\064\u0131\067\130\070\123\071\133\072\124" +
    "\073\125\074\121\075\134\101\117\102\120\001\002\000" +
    "\070\004\070\005\062\024\105\025\110\026\056\027\076" +
    "\030\073\031\067\032\071\033\060\034\075\035\066\036" +
    "\065\037\100\040\072\041\061\042\063\047\103\050\077" +
    "\051\104\053\074\060\106\103\064\105\111\106\102\107" +
    "\101\110\057\001\002\000\042\052\132\053\122\054\131" +
    "\055\115\056\126\057\127\061\u0133\067\130\070\123\071" +
    "\133\072\124\073\125\074\121\075\134\101\117\102\120" +
    "\001\002\000\050\002\uffac\006\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\023\uffac\043\uffac\044\uffac\045\uffac\046\uffac\065\uffac\100" +
    "\uffac\105\uffac\001\002\000\070\004\070\005\062\024\105" +
    "\025\110\026\056\027\076\030\073\031\067\032\071\033" +
    "\060\034\075\035\066\036\065\037\100\040\072\041\061" +
    "\042\063\047\103\050\077\051\104\053\074\060\106\103" +
    "\064\105\111\106\102\107\101\110\057\001\002\000\042" +
    "\052\132\053\122\054\131\055\115\056\126\057\127\061" +
    "\u0136\067\130\070\123\071\133\072\124\073\125\074\121" +
    "\075\134\101\117\102\120\001\002\000\004\077\323\001" +
    "\002\000\046\002\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\023" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\100\uffbe\105\uffbe" +
    "\001\002\000\046\002\uffef\006\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\023\uffef\043\uffef\044\uffef\045\uffef\046\uffef\100\uffef\105" +
    "\uffef\001\002\000\004\105\u013a\001\002\000\004\021\u013b" +
    "\001\002\000\070\004\070\005\062\024\105\025\110\026" +
    "\056\027\076\030\073\031\067\032\071\033\060\034\075" +
    "\035\066\036\065\037\100\040\072\041\061\042\063\047" +
    "\103\050\077\051\104\053\074\060\106\103\064\105\111" +
    "\106\102\107\101\110\057\001\002\000\042\052\132\053" +
    "\122\054\131\055\115\056\126\057\127\061\u013d\067\130" +
    "\070\123\071\133\072\124\073\125\074\121\075\134\101" +
    "\117\102\120\001\002\000\004\077\323\001\002\000\046" +
    "\002\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\023\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\100\uffbc\105\uffbc\001\002\000" +
    "\050\002\uffc7\006\uffc7\007\u0149\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\023" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\100\uffc7\105\uffc7" +
    "\001\002\000\006\006\u0143\077\323\001\002\000\046\002" +
    "\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\023\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\100\uffcb\105\uffcb\001\002\000\050" +
    "\002\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\023\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\100\uffc5\105\uffc5\001" +
    "\002\000\004\060\u0145\001\002\000\046\002\uffc9\006\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\023\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\100\uffc9\105\uffc9\001\002\000\070\004\070\005" +
    "\062\024\105\025\110\026\056\027\076\030\073\031\067" +
    "\032\071\033\060\034\075\035\066\036\065\037\100\040" +
    "\072\041\061\042\063\047\103\050\077\051\104\053\074" +
    "\060\106\103\064\105\111\106\102\107\101\110\057\001" +
    "\002\000\042\052\132\053\122\054\131\055\115\056\126" +
    "\057\127\061\u0147\067\130\070\123\071\133\072\124\073" +
    "\125\074\121\075\134\101\117\102\120\001\002\000\004" +
    "\077\323\001\002\000\050\002\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\023\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\100\uffc4\105\uffc4\001\002\000\006\006\u0143\077\323" +
    "\001\002\000\050\002\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\023\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\100" +
    "\uffc6\105\uffc6\001\002\000\046\002\uffc8\006\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\023\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\100\uffc8\105\uffc8\001\002\000\046\002\uffe4\006\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\023\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\100\uffe4\105\uffe4\001\002\000\004\016\u014e\001\002" +
    "\000\004\060\u014f\001\002\000\070\004\070\005\062\024" +
    "\105\025\110\026\056\027\076\030\073\031\067\032\071" +
    "\033\060\034\075\035\066\036\065\037\100\040\072\041" +
    "\061\042\063\047\103\050\077\051\104\053\074\060\106" +
    "\103\064\105\111\106\102\107\101\110\057\001\002\000" +
    "\042\052\132\053\122\054\131\055\115\056\126\057\127" +
    "\061\u0151\067\130\070\123\071\133\072\124\073\125\074" +
    "\121\075\134\101\117\102\120\001\002\000\050\002\uffbd" +
    "\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\023\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\065\uffbd\100\uffbd\105\uffbd\001\002\000" +
    "\046\002\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\100\uffeb\105\uffeb\001\002" +
    "\000\070\004\070\005\062\024\105\025\110\026\056\027" +
    "\076\030\073\031\067\032\071\033\060\034\075\035\066" +
    "\036\065\037\100\040\072\041\061\042\063\047\103\050" +
    "\077\051\104\053\074\060\106\103\064\105\111\106\102" +
    "\107\101\110\057\001\002\000\042\052\132\053\122\054" +
    "\131\055\115\056\126\057\127\061\u0155\067\130\070\123" +
    "\071\133\072\124\073\125\074\121\075\134\101\117\102" +
    "\120\001\002\000\004\077\323\001\002\000\050\002\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\023\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\100\uffca\105\uffca\001\002\000" +
    "\046\002\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\100\ufff1\105\ufff1\001\002" +
    "\000\046\002\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\100\ufff0\105\ufff0\001" +
    "\002\000\070\004\070\005\062\024\105\025\110\026\056" +
    "\027\076\030\073\031\067\032\071\033\060\034\075\035" +
    "\066\036\065\037\100\040\072\041\061\042\063\047\103" +
    "\050\077\051\104\053\074\060\106\103\064\105\111\106" +
    "\102\107\101\110\057\001\002\000\042\052\132\053\122" +
    "\054\131\055\115\056\126\057\127\064\u015b\067\130\070" +
    "\123\071\133\072\124\073\125\074\121\075\134\101\117" +
    "\102\120\001\002\000\070\004\070\005\062\024\105\025" +
    "\110\026\056\027\076\030\073\031\067\032\071\033\060" +
    "\034\075\035\066\036\065\037\100\040\072\041\061\042" +
    "\063\047\103\050\077\051\104\053\074\060\106\103\064" +
    "\105\111\106\102\107\101\110\057\001\002\000\042\052" +
    "\132\053\122\054\131\055\115\056\126\057\127\064\u015d" +
    "\067\130\070\123\071\133\072\124\073\125\074\121\075" +
    "\134\101\117\102\120\001\002\000\070\004\070\005\062" +
    "\024\105\025\110\026\056\027\076\030\073\031\067\032" +
    "\071\033\060\034\075\035\066\036\065\037\100\040\072" +
    "\041\061\042\063\047\103\050\077\051\104\053\074\060" +
    "\106\103\064\105\111\106\102\107\101\110\057\001\002" +
    "\000\042\052\132\053\122\054\131\055\115\056\126\057" +
    "\127\061\u015f\067\130\070\123\071\133\072\124\073\125" +
    "\074\121\075\134\101\117\102\120\001\002\000\050\002" +
    "\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\023\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\065\uffaf\100\uffaf\105\uffaf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\052\002\043\003\015\014\004\017\023\020" +
    "\011\021\040\022\025\023\014\024\033\025\024\026\030" +
    "\027\006\030\012\031\021\032\017\033\026\034\032\036" +
    "\042\040\005\042\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\015\014\326\017\023\020\011\021\040\022\025\023\014" +
    "\024\033\025\024\026\030\027\006\030\012\031\021\032" +
    "\017\033\026\034\032\036\042\040\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u014c\001\001\000\002\001\001\000\010\005\u0140\010\u0141" +
    "\013\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\045\016\052\041\051\001\001\000\002" +
    "\001\001\000\004\012\311\001\001\000\006\012\210\035" +
    "\304\001\001\000\004\012\271\001\001\000\002\001\001" +
    "\000\004\007\053\001\001\000\002\001\001\000\004\012" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\045\016\111\001\001\000\004\007\053\001" +
    "\001\000\004\012\113\001\001\000\002\001\001\000\004" +
    "\012\154\001\001\000\002\001\001\000\004\012\153\001" +
    "\001\000\004\012\152\001\001\000\004\012\151\001\001" +
    "\000\004\012\150\001\001\000\004\012\147\001\001\000" +
    "\004\012\146\001\001\000\004\012\145\001\001\000\004" +
    "\012\144\001\001\000\004\012\143\001\001\000\004\012" +
    "\140\001\001\000\004\012\137\001\001\000\004\012\136" +
    "\001\001\000\004\012\135\001\001\000\004\012\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\163\001\001\000\002\001\001\000" +
    "\004\012\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\173\001\001\000\002\001\001\000\004" +
    "\012\175\001\001\000\002\001\001\000\004\012\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\210\035\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\216\001\001\000\002\001\001\000\004\012" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\210\035\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\244\001\001\000\002\001\001\000\004\012" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\252\001\001\000\002\001\001\000" +
    "\004\012\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\263\001\001\000\002" +
    "\001\001\000\004\012\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\302\001\001\000\004\012\277" +
    "\001\001\000\002\001\001\000\004\012\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\350\001" +
    "\001\000\006\011\313\012\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\045\016\111\001\001\000\004\012\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\323\001" +
    "\001\000\050\003\015\014\004\017\023\020\011\021\040" +
    "\022\025\023\014\024\033\025\024\026\030\027\006\030" +
    "\012\031\021\032\017\033\026\034\032\036\042\040\005" +
    "\042\324\001\001\000\002\001\001\000\046\003\015\014" +
    "\326\017\023\020\011\021\040\022\025\023\014\024\033" +
    "\025\024\026\030\027\006\030\012\031\021\032\017\033" +
    "\026\034\032\036\042\040\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\332\001\001\000\002\001\001\000\006\011\336" +
    "\043\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\343\001\001\000\002\001" +
    "\001\000\004\006\345\001\001\000\002\001\001\000\004" +
    "\006\347\001\001\000\002\001\001\000\004\006\355\001" +
    "\001\000\006\011\336\043\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\361\001\001" +
    "\000\002\001\001\000\004\012\363\001\001\000\002\001" +
    "\001\000\004\012\365\001\001\000\002\001\001\000\004" +
    "\012\367\001\001\000\002\001\001\000\004\012\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\375\001\001\000\002\001\001\000\004\012" +
    "\377\001\001\000\002\001\001\000\004\012\u0101\001\001" +
    "\000\002\001\001\000\004\012\u0103\001\001\000\002\001" +
    "\001\000\004\012\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u0112\015\u0111\001\001\000\004\012\u0119\001\001" +
    "\000\004\004\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\015" +
    "\014\004\017\023\020\011\021\040\022\025\023\014\024" +
    "\033\025\024\026\030\027\006\030\012\031\021\032\017" +
    "\033\026\034\032\036\042\040\005\042\u0117\001\001\000" +
    "\046\003\015\014\326\017\023\020\011\021\040\022\025" +
    "\023\014\024\033\025\024\026\030\027\006\030\012\031" +
    "\021\032\017\033\026\034\032\036\042\040\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\015\014" +
    "\004\017\023\020\011\021\040\022\025\023\014\024\033" +
    "\025\024\026\030\027\006\030\012\031\021\032\017\033" +
    "\026\034\032\036\042\040\005\042\u011b\001\001\000\046" +
    "\003\015\014\326\017\023\020\011\021\040\022\025\023" +
    "\014\024\033\025\024\026\030\027\006\030\012\031\021" +
    "\032\017\033\026\034\032\036\042\040\005\001\001\000" +
    "\004\012\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0122\001" +
    "\001\000\002\001\001\000\004\012\u0124\001\001\000\002" +
    "\001\001\000\004\012\u0126\001\001\000\002\001\001\000" +
    "\004\012\u0128\001\001\000\002\001\001\000\004\012\u012a" +
    "\001\001\000\002\001\001\000\004\012\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u012f\001\001" +
    "\000\002\001\001\000\004\012\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0134\001\001\000\002" +
    "\001\001\000\004\006\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u013b\001\001\000\002\001\001\000\004\006\u013d\001" +
    "\001\000\002\001\001\000\004\010\u0149\001\001\000\004" +
    "\006\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0145\001\001" +
    "\000\002\001\001\000\004\006\u0147\001\001\000\002\001" +
    "\001\000\004\006\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0153\001\001\000" +
    "\002\001\001\000\004\006\u0155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0159\001" +
    "\001\000\002\001\001\000\004\012\u015b\001\001\000\002" +
    "\001\001\000\004\012\u015d\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        System.err.println("PARSER RECOVERED! No se esperaba el caracter '" + lexema + "'.");
        ErrorHandler.AddError("Sintáctico", NombreArchivo, "[PARSER_RECOVERED]", "No se esperaba el caracter '" + lexema + "'.", fila, columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        System.err.println("PARSER PANIC! No se esperaba el caracter '" + lexema + "'.");
        ErrorHandler.AddError("Sintáctico", NombreArchivo, "[PARSER_PANIC]", "No se esperaba el caracter '" + lexema + "'.", fila, columna);
    }

    private NRaiz raiz;
    private String NombreArchivo;

    public NRaiz getRaiz() {
        return raiz;
    }

    public void setNombreArchivo(String nombre_archivo) {
        this.NombreArchivo = nombre_archivo;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECASI_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECASI_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECASI_VARIABLE puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SENTENCIA_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SENTENCIA_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SENTENCIA_DOWHILE puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SENTENCIA_BREAK 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_CONTINUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SENTENCIA_BREAK puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SENTENCIA_CONTINUE puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= SENTENCIA_RETURN puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= SENTENCIA_LLAMADA puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= SENTENCIA_PRINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SENTENCIA_PRINT puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= SENTENCIA_PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= SENTENCIA_BARPLOT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= SENTENCIA_PLOT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= SENTENCIA_HIST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= SENTENCIA_PIE puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= SENTENCIA_BARPLOT puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= SENTENCIA_PLOT puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= SENTENCIA_HIST puco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE ::= llave_a llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= llave_a LISTA_INSTRUCCIONES llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECASI_FUNCION ::= identificador igual r_function PARAMETROS_FUNCION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECASI_FUNCION ::= identificador igual par_a par_c flecha BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECASI_FUNCION ::= identificador igual par_a EXPRESION par_c flecha BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECASI_FUNCION ::= identificador igual par_a identificador igual EXPRESION par_c flecha BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECASI_FUNCION ::= identificador igual par_a PARAMETRO coma LISTA_PARAM_FUNCION par_c flecha BLOQUE 
            {
              Object RESULT =null;
		 /*RESULT = new NFunc();*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS_FUNCION ::= par_a par_c 
            {
              Object RESULT =null;
		 /*RESULT = new LinkedList<>();*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS_FUNCION ::= par_a LISTA_PARAM_FUNCION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_PARAM_FUNCION ::= LISTA_PARAM_FUNCION coma PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;  RESULT.add(b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_PARAM_FUNCION ::= PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<>();  RESULT.add(a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETRO ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NParam(aright, aleft, archivo, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETRO ::= identificador igual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NParam(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECASI_VARIABLE ::= identificador igual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NDecAsi(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_VARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECASI_VARIABLE ::= identificador LISTA_ACCESO igual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NDecAsiArr(aright, aleft, archivo, a, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECASI_VARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_ACCESO ::= LISTA_ACCESO ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;  RESULT.add(b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_ACCESO ::= ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<>();  RESULT.add(a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ACCESO ::= cor_a EXPRESION cor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new Dimension(1, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACCESO ::= cor_a coma EXPRESION cor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new Dimension(2, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACCESO ::= cor_a EXPRESION coma cor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 /*RESULT = new Dimension(3, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACCESO ::= cor_a cor_a EXPRESION cor_c cor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 /*RESULT = new Dimension(4, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ACCESO ::= cor_a EXPRESION coma EXPRESION cor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new Dimension(5, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_IF ::= SIF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_IF ::= SIF SELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*a.setSecIf(b);  RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIF ::= r_if par_a EXPRESION par_c BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NIf(aright, aleft, archivo, b, c, ETipoNodo.STMT_IF);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIF",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELSE ::= r_else BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<NIf>(); RESULT.add(new NIf(aright, aleft, archivo, b));*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELSE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELSE ::= LISTA_ELIF r_else BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;  RESULT.add(new NIf(bright, bleft, archivo, c));*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELSE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SELSE ::= LISTA_ELIF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELSE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_ELIF ::= LISTA_ELIF ELSE_IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a; RESULT.add(b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ELIF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_ELIF ::= ELSE_IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<>(); RESULT.add(a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ELIF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELSE_IF ::= r_else r_if par_a EXPRESION par_c BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NIf(aright, aleft, archivo, b, c, ETipoNodo.ELSEIF);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SWITCH ::= r_switch par_a EXPRESION par_c llave_a LISTA_CASES llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NSwitch(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SWITCH ::= r_switch par_a EXPRESION par_c llave_a LISTA_CASES r_default dospu LISTA_INSTRUCCIONES llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NSwitch(aright, aleft, archivo, b, c, d);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_CASES ::= LISTA_CASES CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;  RESULT.add(b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_CASES ::= CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<>();  RESULT.add(a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASE ::= r_case EXPRESION dospu LISTA_INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NCase(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_WHILE ::= r_while par_a EXPRESION par_c BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NWhile(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_DOWHILE ::= r_do BLOQUE r_while par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NDoWhile(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_FOR ::= r_for par_a identificador r_in EXPRESION par_c BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NFor(aright, aleft, archivo, b, c, d);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BREAK ::= r_break 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NBreak(aright, aleft, archivo);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_CONTINUE ::= r_continue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NContinue(aright, aleft, archivo);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_RETURN ::= r_return 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NReturn(aright, aleft, archivo);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_RETURN ::= r_return par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NReturn(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_LLAMADA ::= identificador PARAMETROS_LLAMADA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NCall(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS_LLAMADA ::= par_a par_c 
            {
              Object RESULT =null;
		 /*RESULT = new LinkedList<>();*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROS_LLAMADA ::= par_a LISTA_EXPRESIONES par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = a;  RESULT.add(b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma r_default 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 /*RESULT = a;  RESULT.add(new NDefault());*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new LinkedList<>();  RESULT.add(a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_EXPRESIONES ::= r_default 
            {
              Object RESULT =null;
		 /*RESULT = new LinkedList<>();  RESULT.add(new NDefault());*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_PRINT ::= r_print par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NPrint(aright, aleft, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_PIE ::= r_pie par_a EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NPie(aright, aleft, archivo, b, c, d);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PIE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BARPLOT ::= r_barplot par_a EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NBarPlot(aright, aleft, archivo, b, c, d, e, f);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BARPLOT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_PLOT ::= r_plot par_a EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NPlot(aright, aleft, archivo, b, c, d, e, f);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PLOT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_PLOT ::= r_plot par_a EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NDispersion(aright, aleft, archivo, b, c, d, e, f, g, h, i);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PLOT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_HIST ::= r_hist par_a EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NHist(aright, aleft, archivo, b, c, d, e, f);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HIST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NAnd(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NOr(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION igualdad EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NIgualdad(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION diferente_que EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NDiferente(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NMayor(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NMenor(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NMayorIgual(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NMenorIgual(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NSuma(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NResta(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NMultiplicacion(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NDivision(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION mod EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NModulo(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPotencia(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= menos EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NNegativo(aright, aleft, archivo, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NNot(aright, aleft, archivo, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION interrogacion EXPRESION dospu EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NTernario(aright, aleft, archivo, b, c, d);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = a;*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= numero_entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPrim(aright, aleft, archivo, Integer.parseInt(a), ETipoDato.INT);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= numero_decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPrim(aright, aleft, archivo, Double.parseDouble(a), ETipoDato.DECIMAL);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPrim(aright, aleft, archivo, a, ETipoDato.STRING);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= r_true 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPrim(aright, aleft, archivo, true, ETipoDato.BOOLEAN);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= r_false 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NPrim(aright, aleft, archivo, false, ETipoDato.BOOLEAN);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= r_nulo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NNulo(aright, aleft, archivo);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= r_c par_a LISTA_EXPRESIONES par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NVector(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= r_list par_a LISTA_EXPRESIONES par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NList(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= r_array par_a EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NArray(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= r_matrix par_a EXPRESION coma EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMatrix(aright, aleft, archivo, b, c, d);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= r_typeof par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NTypeOf(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= r_length par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NLength(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= r_ncol par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NCol(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= r_nrow par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NRow(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= r_stringlength par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NStringLength(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= r_remove par_a EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NRemove(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= r_tolowercase par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NToLower(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= r_touppercase par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NToUpper(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= r_trunk par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NTrunk(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= r_round par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NRound(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= r_mean par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMean(arigth, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= r_median par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMedian(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= r_mode par_a EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMode(aright, aleft, archivo, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= r_mean par_a EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMean(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= r_median par_a EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMedian(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= r_mode par_a EXPRESION coma EXPRESION par_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 /*RESULT = new NMode(aright, aleft, archivo, b, c);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NId(aright, aleft, archivo, a);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= identificador LISTA_ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 /*RESULT = new NAcceso(aright, aleft, archivo, a, b);*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
