/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/* Analizador de expresiones aritmeticas sencillas. */
package com.analizador.descendente;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int numero = 7;
  /** RegularExpression Id. */
  int decimal = 8;
  /** RegularExpression Id. */
  int r_nulo = 9;
  /** RegularExpression Id. */
  int r_if = 10;
  /** RegularExpression Id. */
  int r_else = 11;
  /** RegularExpression Id. */
  int r_switch = 12;
  /** RegularExpression Id. */
  int r_case = 13;
  /** RegularExpression Id. */
  int r_default = 14;
  /** RegularExpression Id. */
  int r_break = 15;
  /** RegularExpression Id. */
  int r_continue = 16;
  /** RegularExpression Id. */
  int r_return = 17;
  /** RegularExpression Id. */
  int r_while = 18;
  /** RegularExpression Id. */
  int r_for = 19;
  /** RegularExpression Id. */
  int r_do = 20;
  /** RegularExpression Id. */
  int r_in = 21;
  /** RegularExpression Id. */
  int r_function = 22;
  /** RegularExpression Id. */
  int r_true = 23;
  /** RegularExpression Id. */
  int r_false = 24;
  /** RegularExpression Id. */
  int identificador = 25;
  /** RegularExpression Id. */
  int cadena = 26;
  /** RegularExpression Id. */
  int dentro_de_cadena = 27;
  /** RegularExpression Id. */
  int mas = 28;
  /** RegularExpression Id. */
  int menos = 29;
  /** RegularExpression Id. */
  int por = 30;
  /** RegularExpression Id. */
  int div = 31;
  /** RegularExpression Id. */
  int pot = 32;
  /** RegularExpression Id. */
  int mod = 33;
  /** RegularExpression Id. */
  int par_a = 34;
  /** RegularExpression Id. */
  int par_c = 35;
  /** RegularExpression Id. */
  int cor_a = 36;
  /** RegularExpression Id. */
  int cor_c = 37;
  /** RegularExpression Id. */
  int coma = 38;
  /** RegularExpression Id. */
  int puco = 39;
  /** RegularExpression Id. */
  int dospu = 40;
  /** RegularExpression Id. */
  int interrogacion = 41;
  /** RegularExpression Id. */
  int flecha = 42;
  /** RegularExpression Id. */
  int menor = 43;
  /** RegularExpression Id. */
  int mayor = 44;
  /** RegularExpression Id. */
  int menor_igual = 45;
  /** RegularExpression Id. */
  int mayor_igual = 46;
  /** RegularExpression Id. */
  int diferente_que = 47;
  /** RegularExpression Id. */
  int igualdad = 48;
  /** RegularExpression Id. */
  int igual = 49;
  /** RegularExpression Id. */
  int llave_a = 50;
  /** RegularExpression Id. */
  int llave_c = 51;
  /** RegularExpression Id. */
  int or = 52;
  /** RegularExpression Id. */
  int and = 53;
  /** RegularExpression Id. */
  int not = 54;
  /** RegularExpression Id. */
  int err = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<numero>",
    "<decimal>",
    "\"null\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"in\"",
    "\"function\"",
    "\"true\"",
    "\"false\"",
    "<identificador>",
    "<cadena>",
    "<dentro_de_cadena>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%%\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"?\"",
    "\"=>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"==\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"|\"",
    "\"&\"",
    "\"!\"",
    "<err>",
  };

}
